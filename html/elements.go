// Code generated by go generate; DO NOT EDIT.
package html

import (
	"fmt"
	"go-live-view/rend"
)

// Elements

// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/html
/*
Represents the root (top-level element) of an HTML document, so it is also referred to as the root element. All other elements must be descendants of this element.
*/
func Html(children ...rend.Node) rend.Node {
	return Element("html", children...)
}

// html attributes



// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/html/manifest

/*
Specifies the URI of a resource manifest indicating resources that should be cached locally.
*/
func HtmlManifestAttr(value ...any) rend.Node {
	return Attr("manifest", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/html/version

/*
Specifies the version of the HTML Document Type Definition that governs the current document. This attribute is not needed, because it is redundant with the version information in the document type declaration.
*/
func HtmlVersionAttr(value ...any) rend.Node {
	return Attr("version", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/html/xmlns

/*
Specifies the XML Namespace of the document. Default value is "http://www.w3.org/1999/xhtml". This is required in documents parsed with XML parsers, and optional in text/html documents.
*/
func HtmlXmlnsAttr(value ...any) rend.Node {
	return Attr("xmlns", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base
/*
Specifies the base URL to use for all relative URLs in a document. There can be only one such element in a document.
*/
func Base(children ...rend.Node) rend.Node {
	return Void("base", children...)
}

// base attributes



// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base/href

/*
The base URL to be used throughout the document for relative URLs.
      Absolute and relative URLs are allowed.
      data: and javascript: URLs are not allowed.
*/
func BaseHrefAttr(value ...any) rend.Node {
	return Attr("href", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base/target

/*
A keyword or author-defined name of the default browsing context to show the results of navigation from <a>, <area>, or <form> elements without explicit target attributes. The following keywords have special meanings:

      _self (default): Show the result in the current browsing context.
      _blank: Show the result in a new, unnamed browsing context.
      _parent: Show the result in the parent browsing context of the current one, if the current page is inside a frame. If there is no parent, acts the same as _self.
      _top: Show the result in the topmost browsing context (the browsing context that is an ancestor of the current one and has no parent). If there is no parent, acts the same as _self.
*/
func BaseTargetAttr(value ...any) rend.Node {
	return Attr("target", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/head
/*
Contains machine-readable information (metadata) about the document, like its title, scripts, and style sheets.
*/
func Head(children ...rend.Node) rend.Node {
	return Element("head", children...)
}

// head attributes



// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/head/profile

/*
The URIs of one or more metadata profiles, separated by white space.
*/
func HeadProfileAttr(value ...any) rend.Node {
	return Attr("profile", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link
/*
Specifies relationships between the current document and an external resource. This element is most commonly used to link to CSS but is also used to establish site icons (both "favicon" style icons and icons for the home screen and apps on mobile devices) among other things.
*/
func Link(children ...rend.Node) rend.Node {
	return Void("link", children...)
}

// link attributes



// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link/as

/*
This attribute is required when rel="preload" has been set on the <link> element, optional when rel="modulepreload" has been set, and otherwise should not be used.
      It specifies the type of content being loaded by the <link>, which is necessary for request matching, application of correct content security policy, and setting of correct Accept request header.


      Furthermore, rel="preload" uses this as a signal for request prioritization.
      The table below lists the valid values for this attribute and the elements or resources they apply to.




          Value
          Applies To




          audio
          <audio> elements


          document
          <iframe> and <frame> elements


          embed
          <embed> elements


          fetch

            fetch, XHR


                Note: This value also requires
                <link> to contain the crossorigin attribute, see CORS-enabled fetches.





          font

            CSS @font-face


                Note: This value also requires
                <link> to contain the crossorigin attribute, see CORS-enabled fetches.





          image

            <img> and <picture> elements with
            srcset or imageset attributes, SVG <image> elements,
            CSS *-image rules



          object
          <object> elements


          script
          <script> elements, Worker importScripts


          style

            <link rel=stylesheet> elements, CSS
            @import



          track
          <track> elements


          video
          <video> elements


          worker
          Worker, SharedWorker
*/
func LinkAsAttr(value ...any) rend.Node {
	return Attr("as", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link/blocking

/*
This attribute explicitly indicates that certain operations should be blocked on the fetching of an external resource. The operations that are to be blocked must be a space-separated list of blocking attributes listed below.

      render: The rendering of content on the screen is blocked.
*/
func LinkBlockingAttr(value ...any) rend.Node {
	return Attr("blocking", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link/crossorigin

/*
This enumerated attribute indicates whether CORS must be used when fetching the resource.
      CORS-enabled images can be reused in the <canvas> element without being tainted.
      The allowed values are:


      anonymous


          A cross-origin request (i.e. with an Origin HTTP header) is performed, but no credential is sent (i.e. no cookie, X.509 certificate, or HTTP Basic authentication).
          If the server does not give credentials to the origin site (by not setting the Access-Control-Allow-Origin HTTP header) the resource will be tainted and its usage restricted.


      use-credentials


          A cross-origin request (i.e. with an Origin HTTP header) is performed along with a credential sent (i.e. a cookie, certificate, and/or HTTP Basic authentication is performed).
          If the server does not give credentials to the origin site (through Access-Control-Allow-Credentials HTTP header), the resource will be tainted and its usage restricted.




      If the attribute is not present, the resource is fetched without a CORS request (i.e. without sending the Origin HTTP header), preventing its non-tainted usage. If invalid, it is handled as if the enumerated keyword anonymous was used.
      See CORS settings attributes for additional information.
*/
func LinkCrossoriginAttr(value ...any) rend.Node {
	return Attr("crossorigin", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link/anonymous

/*
A cross-origin request (i.e. with an Origin HTTP header) is performed, but no credential is sent (i.e. no cookie, X.509 certificate, or HTTP Basic authentication).
          If the server does not give credentials to the origin site (by not setting the Access-Control-Allow-Origin HTTP header) the resource will be tainted and its usage restricted.
*/
func LinkAnonymousAttr(value ...any) rend.Node {
	return Attr("anonymous", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link/use-credentials

/*
A cross-origin request (i.e. with an Origin HTTP header) is performed along with a credential sent (i.e. a cookie, certificate, and/or HTTP Basic authentication is performed).
          If the server does not give credentials to the origin site (through Access-Control-Allow-Credentials HTTP header), the resource will be tainted and its usage restricted.
*/
func LinkUseCredentialsAttr(value ...any) rend.Node {
	return Attr("use-credentials", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link/disabled

/*
For rel="stylesheet" only, the disabled Boolean attribute indicates whether the described stylesheet should be loaded and applied to the document.
      If disabled is specified in the HTML when it is loaded, the stylesheet will not be loaded during page load.
      Instead, the stylesheet will be loaded on-demand, if and when the disabled attribute is changed to false or removed.

    Setting the disabled property in the DOM causes the stylesheet to be removed from the document's Document.styleSheets list.
*/
func LinkDisabledAttr(value ...any) rend.Node {
	return Attr("disabled", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link/fetchpriority

/*
Provides a hint of the relative priority to use when fetching a preloaded resource. Allowed values:

      high

        Signals a high-priority fetch relative to other resources of the same type.

      low

        Signals a low-priority fetch relative to other resources of the same type.

      auto

        Default: Signals automatic determination of fetch priority relative to other resources of the same type.
*/
func LinkFetchpriorityAttr(value ...any) rend.Node {
	return Attr("fetchpriority", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link/high

/*
Signals a high-priority fetch relative to other resources of the same type.
*/
func LinkHighAttr(value ...any) rend.Node {
	return Attr("high", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link/low

/*
Signals a low-priority fetch relative to other resources of the same type.
*/
func LinkLowAttr(value ...any) rend.Node {
	return Attr("low", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link/auto

/*
Default: Signals automatic determination of fetch priority relative to other resources of the same type.
*/
func LinkAutoAttr(value ...any) rend.Node {
	return Attr("auto", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link/href

/*
This attribute specifies the URL of the linked resource. A URL can be absolute or relative.
*/
func LinkHrefAttr(value ...any) rend.Node {
	return Attr("href", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link/hreflang

/*
This attribute indicates the language of the linked resource.
      It is purely advisory.
      Allowed values are specified by RFC 5646: Tags for Identifying Languages (also known as BCP 47).
      Use this attribute only if the href attribute is present.
*/
func LinkHreflangAttr(value ...any) rend.Node {
	return Attr("hreflang", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link/imagesizes

/*
For rel="preload" and as="image" only, the imagesizes attribute is a sizes attribute that indicates to preload the appropriate resource used by an img element with corresponding values for its srcset and sizes attributes.
*/
func LinkImagesizesAttr(value ...any) rend.Node {
	return Attr("imagesizes", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link/imagesrcset

/*
For rel="preload" and as="image" only, the imagesrcset attribute is a sourceset attribute that indicates to preload the appropriate resource used by an img element with corresponding values for its srcset and sizes attributes.
*/
func LinkImagesrcsetAttr(value ...any) rend.Node {
	return Attr("imagesrcset", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link/integrity

/*
Contains inline metadata — a base64-encoded cryptographic hash of the resource (file) you're telling the browser to fetch.
      The browser can use this to verify that the fetched resource has been delivered free of unexpected manipulation.
      See Subresource Integrity.
*/
func LinkIntegrityAttr(value ...any) rend.Node {
	return Attr("integrity", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link/media

/*
This attribute specifies the media that the linked resource applies to. Its value must be a media type / media query.
      This attribute is mainly useful when linking to external stylesheets — it allows the user agent to pick the best adapted one for the device it runs on.
*/
func LinkMediaAttr(value ...any) rend.Node {
	return Attr("media", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link/referrerpolicy

/*
A string indicating which referrer to use when fetching the resource:

      no-referrer means that the Referer header will not be sent.

        no-referrer-when-downgrade means that no Referer header will be sent when navigating to an origin without TLS (HTTPS).
        This is a user agent's default behavior, if no policy is otherwise specified.

      origin means that the referrer will be the origin of the page, which is roughly the scheme, the host, and the port.
      origin-when-cross-origin means that navigating to other origins will be limited to the scheme, the host, and the port, while navigating on the same origin will include the referrer's path.

        unsafe-url means that the referrer will include the origin and the path (but not the fragment, password, or username).
        This case is unsafe because it can leak origins and paths from TLS-protected resources to insecure origins.
*/
func LinkReferrerpolicyAttr(value ...any) rend.Node {
	return Attr("referrerpolicy", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link/rel

/*
This attribute names a relationship of the linked document to the current document. The attribute must be a space-separated list of link type values.
*/
func LinkRelAttr(value ...any) rend.Node {
	return Attr("rel", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link/sizes

/*
This attribute defines the sizes of the icons for visual media contained in the resource.
      It must be present only if the rel contains a value of icon or a non-standard type such as Apple's apple-touch-icon.
      It may have the following values:


      any, meaning that the icon can be scaled to any size as it is in a vector format, like image/svg+xml.
      a white-space separated list of sizes, each in the format <width in pixels>x<height in pixels> or <width in pixels>X<height in pixels>. Each of these sizes must be contained in the resource.



        Note: Most icon formats are only able to store one single icon; therefore, most of the time, the sizes attribute contains only one entry.
        MS's ICO format does, as well as Apple's ICNS. ICO is more ubiquitous, so you should use this format if cross-browser support is a concern (especially for old IE versions).
*/
func LinkSizesAttr(value ...any) rend.Node {
	return Attr("sizes", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link/title

/*
The title attribute has special semantics on the <link> element.
      When used on a <link rel="stylesheet"> it defines a default or an alternate stylesheet.
*/
func LinkTitleAttr(value ...any) rend.Node {
	return Attr("title", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link/type

/*
This attribute is used to define the type of the content linked to.
      The value of the attribute should be a MIME type such as text/html, text/css, and so on.
      The common use of this attribute is to define the type of stylesheet being referenced (such as text/css), but given that CSS is the only stylesheet language used on the web, not only is it possible to omit the type attribute, but is actually now recommended practice.
      It is also used on rel="preload" link types, to make sure the browser only downloads file types that it supports.
*/
func LinkTypeAttr(value ...any) rend.Node {
	return Attr("type", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link/methods

/*
The value of this attribute provides information about the functions that might be performed on an object.
      The values generally are given by the HTTP protocol when it is used, but it might (for similar reasons as for the title attribute) be useful to include advisory information in advance in the link.
      For example, the browser might choose a different rendering of a link as a function of the methods specified;
      something that is searchable might get a different icon, or an outside link might render with an indication of leaving the current site.
      This attribute is not well understood nor supported, even by the defining browser, Internet Explorer 4.
*/
func LinkMethodsAttr(value ...any) rend.Node {
	return Attr("methods", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link/target

/*
Defines the frame or window name that has the defined linking relationship or that will show the rendering of any linked resource.
*/
func LinkTargetAttr(value ...any) rend.Node {
	return Attr("target", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link/charset

/*
This attribute defines the character encoding of the linked resource.
      The value is a space- and/or comma-delimited list of character sets as defined in RFC 2045.
      The default value is iso-8859-1.


      Note: To produce the same effect as this obsolete attribute, use the Content-Type HTTP header on the linked resource.
*/
func LinkCharsetAttr(value ...any) rend.Node {
	return Attr("charset", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link/rev

/*
The value of this attribute shows the relationship of the current document to the linked document, as defined by the href attribute.
      The attribute thus defines the reverse relationship compared to the value of the rel attribute.
      Link type values for the attribute are similar to the possible values for rel.



        Note: Instead of rev, you should use the rel attribute with the opposite link type value.
        For example, to establish the reverse link for made, specify author. Also, this attribute doesn't stand for "revision" and must not be used with a version number, even though many sites misuse it in this way.
*/
func LinkRevAttr(value ...any) rend.Node {
	return Attr("rev", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta
/*
Represents metadata that cannot be represented by other HTML meta-related elements, like <base>, <link>, <script>, <style> and <title>.
*/
func Meta(children ...rend.Node) rend.Node {
	return Void("meta", children...)
}

// meta attributes



// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta/charset

/*
This attribute declares the document's character encoding. If the attribute is present, its value must be an ASCII case-insensitive match for the string "utf-8", because UTF-8 is the only valid encoding for HTML5 documents. <meta> elements which declare a character encoding must be located entirely within the first 1024 bytes of the document.
*/
func MetaCharsetAttr(value ...any) rend.Node {
	return Attr("charset", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta/content

/*
This attribute contains the value for the http-equiv or name attribute, depending on which is used.
*/
func MetaContentAttr(value ...any) rend.Node {
	return Attr("content", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta/http-equiv

/*
Defines a pragma directive. The attribute is named http-equiv(alent) because all the allowed values are names of particular HTTP headers:


        content-security-policy
        Allows page authors to define a content policy for the current page. Content policies mostly specify allowed server origins and script endpoints which help guard against cross-site scripting attacks.


        content-type
        Declares the MIME type and the document's character encoding. The content attribute must have the value "text/html; charset=utf-8" if specified. This is equivalent to a <meta> element with the charset attribute specified and carries the same restriction on placement within the document. Note: Can only be used in documents served with a text/html — not in documents served with an XML MIME type.


        default-style
        Sets the name of the default CSS style sheet set.


        x-ua-compatible
        If specified, the content attribute must have the value "IE=edge". User agents are required to ignore this pragma.

      refresh This instruction specifies:

          The number of seconds until the page should be reloaded - only if the content attribute contains a non-negative integer.
          The number of seconds until the page should redirect to another - only if the content attribute contains a non-negative integer followed by the string ';url=', and a valid URL.


          Warning:
          Pages set with a refresh value run the risk of having the time interval being too short. People navigating with the aid of assistive technology such as a screen reader may be unable to read through and understand the page's content before being automatically redirected. The abrupt, unannounced updating of the page content may also be disorienting for people experiencing low vision conditions.

            MDN Understanding WCAG, Guideline 2.2 explanations
            MDN Understanding WCAG, Guideline 3.2 explanations
            Understanding Success Criterion 2.2.1 | W3C Understanding WCAG 2.0
            Understanding Success Criterion 2.2.4 | W3C Understanding WCAG 2.0
            Understanding Success Criterion 3.2.5 | W3C Understanding WCAG 2.0
*/
func MetaHttpEquivAttr(value ...any) rend.Node {
	return Attr("http-equiv", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta/name

/*
The name and content attributes can be used together to provide document metadata in terms of name-value pairs, with the name attribute giving the metadata name, and the content attribute giving the value.
    See standard metadata names for details about the set of standard metadata names defined in the HTML specification.
*/
func MetaNameAttr(value ...any) rend.Node {
	return Attr("name", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/style
/*
Contains style information for a document or part of a document. It contains CSS, which is applied to the contents of the document containing this element.
*/
func Style(children ...rend.Node) rend.Node {
	return Element("style", children...)
}

// style attributes



// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/style/blocking

/*
This attribute explicitly indicates that certain operations should be blocked on the fetching of critical subresources. @import-ed stylesheets are generally considered as critical subresources, whereas background-image and fonts are not.

      render: The rendering of content on the screen is blocked.
*/
func StyleBlockingAttr(value ...any) rend.Node {
	return Attr("blocking", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/style/media

/*
This attribute defines which media the style should be applied to. Its value is a media query, which defaults to all if the attribute is missing.
*/
func StyleMediaAttr(value ...any) rend.Node {
	return Attr("media", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/style/nonce

/*
A cryptographic nonce (number used once) used to allow inline styles in a style-src Content-Security-Policy. The server must generate a unique nonce value each time it transmits a policy. It is critical to provide a nonce that cannot be guessed as bypassing a resource's policy is otherwise trivial.
*/
func StyleNonceAttr(value ...any) rend.Node {
	return Attr("nonce", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/style/title

/*
This attribute specifies alternative style sheet sets.
*/
func StyleTitleAttr(value ...any) rend.Node {
	return Attr("title", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/style/type

/*
This attribute should not be provided: if it is, the only permitted values are the empty string or a case-insensitive match for text/css.
*/
func StyleTypeAttr(value ...any) rend.Node {
	return Attr("type", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/title
/*
Defines the document's title that is shown in a browser's title bar or a page's tab. It only contains text; tags within the element are ignored.
*/
func Title(children ...rend.Node) rend.Node {
	return Element("title", children...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body
/*
represents the content of an HTML document. There can be only one such element in a document.
*/
func Body(children ...rend.Node) rend.Node {
	return Element("body", children...)
}

// body attributes



// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body/alink

/*
Color of text for hyperlinks when selected.
      Do not use this attribute! Use the CSS color property in conjunction with the :active pseudo-class instead.
*/
func BodyAlinkAttr(value ...any) rend.Node {
	return Attr("alink", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body/background

/*
URI of an image to use as a background.
      Do not use this attribute! Use the CSS background property on the element instead.
*/
func BodyBackgroundAttr(value ...any) rend.Node {
	return Attr("background", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body/bgcolor

/*
Background color for the document.
      Do not use this attribute! Use the CSS background-color property on the element instead.
*/
func BodyBgcolorAttr(value ...any) rend.Node {
	return Attr("bgcolor", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body/bottommargin

/*
The margin of the bottom of the body.
      Do not use this attribute! Use the CSS margin-bottom property on the element instead.
*/
func BodyBottommarginAttr(value ...any) rend.Node {
	return Attr("bottommargin", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body/leftmargin

/*
The margin of the left of the body.
      Do not use this attribute! Use the CSS margin-left property on the element instead.
*/
func BodyLeftmarginAttr(value ...any) rend.Node {
	return Attr("leftmargin", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body/link

/*
Color of text for unvisited hypertext links.
      Do not use this attribute! Use the CSS color property in conjunction with the :link pseudo-class instead.
*/
func BodyLinkAttr(value ...any) rend.Node {
	return Attr("link", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body/onafterprint

/*
Function to call after the user has printed the document.
*/
func BodyOnafterprintAttr(value ...any) rend.Node {
	return Attr("onafterprint", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body/onbeforeprint

/*
Function to call when the user requests printing of the document.
*/
func BodyOnbeforeprintAttr(value ...any) rend.Node {
	return Attr("onbeforeprint", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body/onbeforeunload

/*
Function to call when the document is about to be unloaded.
*/
func BodyOnbeforeunloadAttr(value ...any) rend.Node {
	return Attr("onbeforeunload", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body/onblur

/*
Function to call when the document loses focus.
*/
func BodyOnblurAttr(value ...any) rend.Node {
	return Attr("onblur", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body/onerror

/*
Function to call when the document fails to load properly.
*/
func BodyOnerrorAttr(value ...any) rend.Node {
	return Attr("onerror", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body/onfocus

/*
Function to call when the document receives focus.
*/
func BodyOnfocusAttr(value ...any) rend.Node {
	return Attr("onfocus", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body/onhashchange

/*
Function to call when the fragment identifier part (starting with the hash ('#') character) of the document's current address has changed.
*/
func BodyOnhashchangeAttr(value ...any) rend.Node {
	return Attr("onhashchange", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body/onlanguagechange

/*
Function to call when the preferred languages changed.
*/
func BodyOnlanguagechangeAttr(value ...any) rend.Node {
	return Attr("onlanguagechange", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body/onload

/*
Function to call when the document has finished loading.
*/
func BodyOnloadAttr(value ...any) rend.Node {
	return Attr("onload", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body/onmessage

/*
Function to call when the document has received a message.
*/
func BodyOnmessageAttr(value ...any) rend.Node {
	return Attr("onmessage", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body/onoffline

/*
Function to call when network communication has failed.
*/
func BodyOnofflineAttr(value ...any) rend.Node {
	return Attr("onoffline", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body/ononline

/*
Function to call when network communication has been restored.
*/
func BodyOnonlineAttr(value ...any) rend.Node {
	return Attr("ononline", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body/onpopstate

/*
Function to call when the user has navigated session history.
*/
func BodyOnpopstateAttr(value ...any) rend.Node {
	return Attr("onpopstate", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body/onredo

/*
Function to call when the user has moved forward in undo transaction history.
*/
func BodyOnredoAttr(value ...any) rend.Node {
	return Attr("onredo", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body/onresize

/*
Function to call when the document has been resized.
*/
func BodyOnresizeAttr(value ...any) rend.Node {
	return Attr("onresize", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body/onstorage

/*
Function to call when the storage area has changed.
*/
func BodyOnstorageAttr(value ...any) rend.Node {
	return Attr("onstorage", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body/onundo

/*
Function to call when the user has moved backward in undo transaction history.
*/
func BodyOnundoAttr(value ...any) rend.Node {
	return Attr("onundo", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body/onunload

/*
Function to call when the document is going away.
*/
func BodyOnunloadAttr(value ...any) rend.Node {
	return Attr("onunload", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body/rightmargin

/*
The margin of the right of the body.
      Do not use this attribute! Use the CSS margin-right property on the element instead.
*/
func BodyRightmarginAttr(value ...any) rend.Node {
	return Attr("rightmargin", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body/text

/*
Foreground color of text.
      Do not use this attribute! Use CSS color property on the element instead.
*/
func BodyTextAttr(value ...any) rend.Node {
	return Attr("text", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body/topmargin

/*
The margin of the top of the body.
      Do not use this attribute! Use the CSS margin-top property on the element instead.
*/
func BodyTopmarginAttr(value ...any) rend.Node {
	return Attr("topmargin", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body/vlink

/*
Color of text for visited hypertext links.
      Do not use this attribute! Use the CSS color property in conjunction with the :visited pseudo-class instead.
*/
func BodyVlinkAttr(value ...any) rend.Node {
	return Attr("vlink", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/address
/*
Indicates that the enclosed HTML provides contact information for a person or people, or for an organization.
*/
func Address(children ...rend.Node) rend.Node {
	return Element("address", children...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article
/*
Represents a self-contained composition in a document, page, application, or site, which is intended to be independently distributable or reusable (e.g., in syndication). Examples include a forum post, a magazine or newspaper article, a blog entry, a product card, a user-submitted comment, an interactive widget or gadget, or any other independent item of content.
*/
func Article(children ...rend.Node) rend.Node {
	return Element("article", children...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/aside
/*
Represents a portion of a document whose content is only indirectly related to the document's main content. Asides are frequently presented as sidebars or call-out boxes.
*/
func Aside(children ...rend.Node) rend.Node {
	return Element("aside", children...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/footer
/*
Represents a footer for its nearest ancestor sectioning content or sectioning root element. A <footer> typically contains information about the author of the section, copyright data, or links to related documents.
*/
func Footer(children ...rend.Node) rend.Node {
	return Element("footer", children...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/header
/*
Represents introductory content, typically a group of introductory or navigational aids. It may contain some heading elements but also a logo, a search form, an author name, and other elements.
*/
func Header(children ...rend.Node) rend.Node {
	return Element("header", children...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h1
/*
Represent six levels of section headings. <h1> is the highest section level and <h6> is the lowest.
*/
func H1(children ...rend.Node) rend.Node {
	return Element("h1", children...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h2
/*
Represent six levels of section headings. <h1> is the highest section level and <h6> is the lowest.
*/
func H2(children ...rend.Node) rend.Node {
	return Element("h2", children...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h3
/*
Represent six levels of section headings. <h1> is the highest section level and <h6> is the lowest.
*/
func H3(children ...rend.Node) rend.Node {
	return Element("h3", children...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h4
/*
Represent six levels of section headings. <h1> is the highest section level and <h6> is the lowest.
*/
func H4(children ...rend.Node) rend.Node {
	return Element("h4", children...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h5
/*
Represent six levels of section headings. <h1> is the highest section level and <h6> is the lowest.
*/
func H5(children ...rend.Node) rend.Node {
	return Element("h5", children...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h6
/*
Represent six levels of section headings. <h1> is the highest section level and <h6> is the lowest.
*/
func H6(children ...rend.Node) rend.Node {
	return Element("h6", children...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/hgroup
/*
Represents a heading grouped with any secondary content, such as subheadings, an alternative title, or a tagline.
*/
func Hgroup(children ...rend.Node) rend.Node {
	return Element("hgroup", children...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/main
/*
Represents the dominant content of the body of a document. The main content area consists of content that is directly related to or expands upon the central topic of a document, or the central functionality of an application.
*/
func Main(children ...rend.Node) rend.Node {
	return Element("main", children...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/nav
/*
Represents a section of a page whose purpose is to provide navigation links, either within the current document or to other documents. Common examples of navigation sections are menus, tables of contents, and indexes.
*/
func Nav(children ...rend.Node) rend.Node {
	return Element("nav", children...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/section
/*
Represents a generic standalone section of a document, which doesn't have a more specific semantic element to represent it. Sections should always have a heading, with very few exceptions.
*/
func Section(children ...rend.Node) rend.Node {
	return Element("section", children...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/search
/*
Represents a part that contains a set of form controls or other content related to performing a search or filtering operation.
*/
func Search(children ...rend.Node) rend.Node {
	return Element("search", children...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blockquote
/*
Indicates that the enclosed text is an extended quotation. Usually, this is rendered visually by indentation. A URL for the source of the quotation may be given using the cite attribute, while a text representation of the source can be given using the <cite> element.
*/
func Blockquote(children ...rend.Node) rend.Node {
	return Element("blockquote", children...)
}

// blockquote attributes



// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blockquote/cite

/*
A URL that designates a source document or message for the information quoted. This attribute is intended to point to information explaining the context or the reference for the quote.
*/
func BlockquoteCiteAttr(value ...any) rend.Node {
	return Attr("cite", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dd
/*
Provides the description, definition, or value for the preceding term (<dt>) in a description list (<dl>).
*/
func Dd(children ...rend.Node) rend.Node {
	return Element("dd", children...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div
/*
The generic container for flow content. It has no effect on the content or layout until styled in some way using CSS (e.g., styling is directly applied to it, or some kind of layout model like flexbox is applied to its parent element).
*/
func Div(children ...rend.Node) rend.Node {
	return Element("div", children...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dl
/*
Represents a description list. The element encloses a list of groups of terms (specified using the <dt> element) and descriptions (provided by <dd> elements). Common uses for this element are to implement a glossary or to display metadata (a list of key-value pairs).
*/
func Dl(children ...rend.Node) rend.Node {
	return Element("dl", children...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dt
/*
Specifies a term in a description or definition list, and as such must be used inside a <dl> element. It is usually followed by a <dd> element; however, multiple <dt> elements in a row indicate several terms that are all defined by the immediate next <dd> element.
*/
func Dt(children ...rend.Node) rend.Node {
	return Element("dt", children...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figcaption
/*
Represents a caption or legend describing the rest of the contents of its parent <figure> element.
*/
func Figcaption(children ...rend.Node) rend.Node {
	return Element("figcaption", children...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figure
/*
Represents self-contained content, potentially with an optional caption, which is specified using the <figcaption> element. The figure, its caption, and its contents are referenced as a single unit.
*/
func Figure(children ...rend.Node) rend.Node {
	return Element("figure", children...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/hr
/*
Represents a thematic break between paragraph-level elements: for example, a change of scene in a story, or a shift of topic within a section.
*/
func Hr(children ...rend.Node) rend.Node {
	return Void("hr", children...)
}

// hr attributes



// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/hr/align

/*
Sets the alignment of the rule on the page. If no value is specified, the default value is left.
*/
func HrAlignAttr(value ...any) rend.Node {
	return Attr("align", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/hr/color

/*
Sets the color of the rule through color name or hexadecimal value.
*/
func HrColorAttr(value ...any) rend.Node {
	return Attr("color", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/hr/noshade

/*
Sets the rule to have no shading.
*/
func HrNoshadeAttr(value ...any) rend.Node {
	return Attr("noshade", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/hr/size

/*
Sets the height, in pixels, of the rule.
*/
func HrSizeAttr(value ...any) rend.Node {
	return Attr("size", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/hr/width

/*
Sets the length of the rule on the page through a pixel or percentage value.
*/
func HrWidthAttr(value ...any) rend.Node {
	return Attr("width", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/li
/*
Represents an item in a list. It must be contained in a parent element: an ordered list (<ol>), an unordered list (<ul>), or a menu (<menu>). In menus and unordered lists, list items are usually displayed using bullet points. In ordered lists, they are usually displayed with an ascending counter on the left, such as a number or letter.
*/
func Li(children ...rend.Node) rend.Node {
	return Element("li", children...)
}

// li attributes



// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/li/value

/*
This integer attribute indicates the current ordinal value of the list item as defined by the <ol> element. The only allowed value for this attribute is a number, even if the list is displayed with Roman numerals or letters. List items that follow this one continue numbering from the value set. The value attribute has no meaning for unordered lists (<ul>) or for menus (<menu>).
*/
func LiValueAttr(value ...any) rend.Node {
	return Attr("value", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/li/type

/*
This character attribute indicates the numbering type:

      a: lowercase letters
      A: uppercase letters
      i: lowercase Roman numerals
      I: uppercase Roman numerals
      1: numbers

    This type overrides the one used by its parent <ol> element, if any.

      Note: This attribute has been deprecated; use the CSS list-style-type property instead.
*/
func LiTypeAttr(value ...any) rend.Node {
	return Attr("type", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/menu
/*
A semantic alternative to <ul>, but treated by browsers (and exposed through the accessibility tree) as no different than <ul>. It represents an unordered list of items (which are represented by <li> elements).
*/
func Menu(children ...rend.Node) rend.Node {
	return Element("menu", children...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ol
/*
Represents an ordered list of items — typically rendered as a numbered list.
*/
func Ol(children ...rend.Node) rend.Node {
	return Element("ol", children...)
}

// ol attributes



// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ol/reversed

/*
This Boolean attribute specifies that the list's items are in reverse order. Items will be numbered from high to low.
*/
func OlReversedAttr(value ...any) rend.Node {
	return Attr("reversed", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ol/start

/*
An integer to start counting from for the list items. Always an Arabic numeral (1, 2, 3, etc.), even when the numbering type is letters or Roman numerals. For example, to start numbering elements from the letter "d" or the Roman numeral "iv," use start="4".
*/
func OlStartAttr(value ...any) rend.Node {
	return Attr("start", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ol/type

/*
Sets the numbering type:

      a for lowercase letters
      A for uppercase letters
      i for lowercase Roman numerals
      I for uppercase Roman numerals
      1 for numbers (default)

    The specified type is used for the entire list unless a different type attribute is used on an enclosed <li> element.

      Note: Unless the type of the list number matters (like legal or technical documents where items are referenced by their number/letter), use the CSS list-style-type property instead.
*/
func OlTypeAttr(value ...any) rend.Node {
	return Attr("type", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/p
/*
Represents a paragraph. Paragraphs are usually represented in visual media as blocks of text separated from adjacent blocks by blank lines and/or first-line indentation, but HTML paragraphs can be any structural grouping of related content, such as images or form fields.
*/
func P(children ...rend.Node) rend.Node {
	return Element("p", children...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/pre
/*
Represents preformatted text which is to be presented exactly as written in the HTML file. The text is typically rendered using a non-proportional, or monospaced, font. Whitespace inside this element is displayed as written.
*/
func Pre(children ...rend.Node) rend.Node {
	return Element("pre", children...)
}

// pre attributes



// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/pre/cols

/*
Contains the preferred count of characters that a line should have. It was a non-standard synonym of width. To achieve such an effect, use CSS width instead.
*/
func PreColsAttr(value ...any) rend.Node {
	return Attr("cols", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/pre/width

/*
Contains the preferred count of characters that a line should have. Though technically still implemented, this attribute has no visual effect; to achieve such an effect, use CSS width instead.
*/
func PreWidthAttr(value ...any) rend.Node {
	return Attr("width", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/pre/wrap

/*
Is a hint indicating how the overflow must happen. In modern browser this hint is ignored and no visual effect results in its present; to achieve such an effect, use CSS white-space instead.
*/
func PreWrapAttr(value ...any) rend.Node {
	return Attr("wrap", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul
/*
Represents an unordered list of items, typically rendered as a bulleted list.
*/
func Ul(children ...rend.Node) rend.Node {
	return Element("ul", children...)
}

// ul attributes



// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul/compact

/*
This Boolean attribute hints that the list should be rendered in a compact style. The interpretation of this attribute depends on the user agent, and it doesn't work in all browsers.

      Warning: Do not use this attribute, as it has been deprecated: use CSS instead. To give a similar effect as the compact attribute, the CSS property line-height can be used with a value of 80%.
*/
func UlCompactAttr(value ...any) rend.Node {
	return Attr("compact", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul/type

/*
This attribute sets the bullet style for the list. The values defined under HTML3.2 and the transitional version of HTML 4.0/4.01 are:

      circle
      disc
      square

    A fourth bullet type has been defined in the WebTV interface, but not all browsers support it: triangle.
    If not present and if no CSS list-style-type property applies to the element, the user agent selects a bullet type depending on the nesting level of the list.

      Warning: Do not use this attribute, as it has been deprecated; use the CSS list-style-type property instead.
*/
func UlTypeAttr(value ...any) rend.Node {
	return Attr("type", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a
/*
Together with its href attribute, creates a hyperlink to web pages, files, email addresses, locations within the current page, or anything else a URL can address.
*/
func A(children ...rend.Node) rend.Node {
	return Element("a", children...)
}

// a attributes



// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a/download

/*
Causes the browser to treat the linked URL as a download. Can be used with or without a filename value:

      Without a value, the browser will suggest a filename/extension, generated from various sources:

          The Content-Disposition HTTP header
          The final segment in the URL path
          The media type (from the Content-Type header, the start of a data: URL, or Blob.type for a blob: URL)


      filename: defining a value suggests it as the filename. / and \ characters are converted to underscores (_). Filesystems may forbid other characters in filenames, so browsers will adjust the suggested name if necessary.


      Note:

        download only works for same-origin URLs, or the blob: and data: schemes.
        How browsers treat downloads varies by browser, user settings, and other factors. The user may be prompted before a download starts, or the file may be saved automatically, or it may open automatically, either in an external application or in the browser itself.
        If the Content-Disposition header has different information from the download attribute, resulting behavior may differ:

            If the header specifies a filename, it takes priority over a filename specified in the download attribute.
            If the header specifies a disposition of inline, Chrome and Firefox prioritize the attribute and treat it as a download. Old Firefox versions (before 82) prioritize the header and will display the content inline.
*/
func ADownloadAttr(value ...any) rend.Node {
	return Attr("download", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a/href

/*
The URL that the hyperlink points to. Links are not restricted to HTTP-based URLs — they can use any URL scheme supported by browsers:

      Sections of a page with document fragments
      Specific text portions with text fragments
      Pieces of media files with media fragments
      Telephone numbers with tel: URLs
      Email addresses with mailto: URLs
      SMS text messages with sms: URLs
      While web browsers may not support other URL schemes, websites can with registerProtocolHandler()
*/
func AHrefAttr(value ...any) rend.Node {
	return Attr("href", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a/hreflang

/*
Hints at the human language of the linked URL. No built-in functionality. Allowed values are the same as the global lang attribute.
*/
func AHreflangAttr(value ...any) rend.Node {
	return Attr("hreflang", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a/ping

/*
A space-separated list of URLs. When the link is followed, the browser will send POST requests with the body PING to the URLs. Typically for tracking.
*/
func APingAttr(value ...any) rend.Node {
	return Attr("ping", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a/referrerpolicy

/*
How much of the referrer to send when following the link.

      no-referrer: The Referer header will not be sent.
      no-referrer-when-downgrade: The Referer header will not be sent to origins without TLS (HTTPS).
      origin: The sent referrer will be limited to the origin of the referring page: its scheme, host, and port.
      origin-when-cross-origin: The referrer sent to other origins will be limited to the scheme, the host, and the port. Navigations on the same origin will still include the path.
      same-origin: A referrer will be sent for same origin, but cross-origin requests will contain no referrer information.
      strict-origin: Only send the origin of the document as the referrer when the protocol security level stays the same (HTTPS→HTTPS), but don't send it to a less secure destination (HTTPS→HTTP).
      strict-origin-when-cross-origin (default): Send a full URL when performing a same-origin request, only send the origin when the protocol security level stays the same (HTTPS→HTTPS), and send no header to a less secure destination (HTTPS→HTTP).
      unsafe-url: The referrer will include the origin and the path (but not the fragment, password, or username). This value is unsafe, because it leaks origins and paths from TLS-protected resources to insecure origins.
*/
func AReferrerpolicyAttr(value ...any) rend.Node {
	return Attr("referrerpolicy", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a/rel

/*
The relationship of the linked URL as space-separated link types.
*/
func ARelAttr(value ...any) rend.Node {
	return Attr("rel", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a/target

/*
Where to display the linked URL, as the name for a browsing context (a tab, window, or <iframe>). The following keywords have special meanings for where to load the URL:

      _self: the current browsing context. (Default)
      _blank: usually a new tab, but users can configure browsers to open a new window instead.
      _parent: the parent browsing context of the current one. If no parent, behaves as _self.
      _top: the topmost browsing context (the "highest" context that's an ancestor of the current one). If no ancestors, behaves as _self.


      Note: Setting target="_blank" on <a> elements implicitly provides the same rel behavior as setting rel="noopener" which does not set window.opener.
*/
func ATargetAttr(value ...any) rend.Node {
	return Attr("target", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a/type

/*
Hints at the linked URL's format with a MIME type. No built-in functionality.
*/
func ATypeAttr(value ...any) rend.Node {
	return Attr("type", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a/charset

/*
Hinted at the character encoding of the linked URL.

      Note: This attribute is deprecated and should not be used by authors. Use the HTTP Content-Type header on the linked URL.
*/
func ACharsetAttr(value ...any) rend.Node {
	return Attr("charset", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a/coords

/*
Used with the shape attribute. A comma-separated list of coordinates.
*/
func ACoordsAttr(value ...any) rend.Node {
	return Attr("coords", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a/name

/*
Was required to define a possible target location in a page. In HTML 4.01, id and name could both be used on <a>, as long as they had identical values.

      Note: Use the global attribute id instead.
*/
func ANameAttr(value ...any) rend.Node {
	return Attr("name", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a/rev

/*
Specified a reverse link; the opposite of the rel attribute. Deprecated for being very confusing.
*/
func ARevAttr(value ...any) rend.Node {
	return Attr("rev", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a/shape

/*
The shape of the hyperlink's region in an image map.

      Note: Use the <area> element for image maps instead.
*/
func AShapeAttr(value ...any) rend.Node {
	return Attr("shape", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/abbr
/*
Represents an abbreviation or acronym.
*/
func Abbr(children ...rend.Node) rend.Node {
	return Element("abbr", children...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/b
/*
Used to draw the reader's attention to the element's contents, which are not otherwise granted special importance. This was formerly known as the Boldface element, and most browsers still draw the text in boldface. However, you should not use <b> for styling text or granting importance. If you wish to create boldface text, you should use the CSS font-weight property. If you wish to indicate an element is of special importance, you should use the strong element.
*/
func B(children ...rend.Node) rend.Node {
	return Element("b", children...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/bdi
/*
Tells the browser's bidirectional algorithm to treat the text it contains in isolation from its surrounding text. It's particularly useful when a website dynamically inserts some text and doesn't know the directionality of the text being inserted.
*/
func Bdi(children ...rend.Node) rend.Node {
	return Element("bdi", children...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/bdo
/*
Overrides the current directionality of text, so that the text within is rendered in a different direction.
*/
func Bdo(children ...rend.Node) rend.Node {
	return Element("bdo", children...)
}

// bdo attributes



// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/bdo/dir

/*
The direction in which text should be rendered in this element's contents. Possible values are:

      ltr: Indicates that the text should go in a left-to-right direction.
      rtl: Indicates that the text should go in a right-to-left direction.
*/
func BdoDirAttr(value ...any) rend.Node {
	return Attr("dir", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/br
/*
Produces a line break in text (carriage-return). It is useful for writing a poem or an address, where the division of lines is significant.
*/
func Br(children ...rend.Node) rend.Node {
	return Void("br", children...)
}

// br attributes



// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/br/clear

/*
Indicates where to begin the next line after the break.
*/
func BrClearAttr(value ...any) rend.Node {
	return Attr("clear", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/cite
/*
Used to mark up the title of a cited creative work. The reference may be in an abbreviated form according to context-appropriate conventions related to citation metadata.
*/
func Cite(children ...rend.Node) rend.Node {
	return Element("cite", children...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/code
/*
Displays its contents styled in a fashion intended to indicate that the text is a short fragment of computer code. By default, the content text is displayed using the user agent's default monospace font.
*/
func Code(children ...rend.Node) rend.Node {
	return Element("code", children...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/data
/*
Links a given piece of content with a machine-readable translation. If the content is time- or date-related, the<time> element must be used.
*/
func Data(children ...rend.Node) rend.Node {
	return Element("data", children...)
}

// data attributes



// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/data/value

/*
This attribute specifies the machine-readable translation of the content of the element.
*/
func DataValueAttr(value ...any) rend.Node {
	return Attr("value", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dfn
/*
Used to indicate the term being defined within the context of a definition phrase or sentence. The ancestor <p> element, the <dt>/<dd> pairing, or the nearest section ancestor of the <dfn> element, is considered to be the definition of the term.
*/
func Dfn(children ...rend.Node) rend.Node {
	return Element("dfn", children...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/em
/*
Marks text that has stress emphasis. The <em> element can be nested, with each nesting level indicating a greater degree of emphasis.
*/
func Em(children ...rend.Node) rend.Node {
	return Element("em", children...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/i
/*
Represents a range of text that is set off from the normal text for some reason, such as idiomatic text, technical terms, and taxonomical designations, among others. Historically, these have been presented using italicized type, which is the original source of the <i> naming of this element.
*/
func I(children ...rend.Node) rend.Node {
	return Element("i", children...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/kbd
/*
Represents a span of inline text denoting textual user input from a keyboard, voice input, or any other text entry device. By convention, the user agent defaults to rendering the contents of a <kbd> element using its default monospace font, although this is not mandated by the HTML standard.
*/
func Kbd(children ...rend.Node) rend.Node {
	return Element("kbd", children...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/mark
/*
Represents text which is marked or highlighted for reference or notation purposes due to the marked passage's relevance in the enclosing context.
*/
func Mark(children ...rend.Node) rend.Node {
	return Element("mark", children...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/q
/*
Indicates that the enclosed text is a short inline quotation. Most modern browsers implement this by surrounding the text in quotation marks. This element is intended for short quotations that don't require paragraph breaks; for long quotations use the <blockquote> element.
*/
func Q(children ...rend.Node) rend.Node {
	return Element("q", children...)
}

// q attributes



// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/q/cite

/*
The value of this attribute is a URL that designates a source document or message for the information quoted. This attribute is intended to point to information explaining the context or the reference for the quote.
*/
func QCiteAttr(value ...any) rend.Node {
	return Attr("cite", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rp
/*
Used to provide fall-back parentheses for browsers that do not support the display of ruby annotations using the <ruby> element. One <rp> element should enclose each of the opening and closing parentheses that wrap the <rt> element that contains the annotation's text.
*/
func Rp(children ...rend.Node) rend.Node {
	return Element("rp", children...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rt
/*
Specifies the ruby text component of a ruby annotation, which is used to provide pronunciation, translation, or transliteration information for East Asian typography. The <rt> element must always be contained within a <ruby> element.
*/
func Rt(children ...rend.Node) rend.Node {
	return Element("rt", children...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ruby
/*
Represents small annotations that are rendered above, below, or next to base text, usually used for showing the pronunciation of East Asian characters. It can also be used for annotating other kinds of text, but this usage is less common.
*/
func Ruby(children ...rend.Node) rend.Node {
	return Element("ruby", children...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/s
/*
Renders text with a strikethrough, or a line through it. Use the <s> element to represent things that are no longer relevant or no longer accurate. However, <s> is not appropriate when indicating document edits; for that, use the del and ins elements, as appropriate.
*/
func S(children ...rend.Node) rend.Node {
	return Element("s", children...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/samp
/*
Used to enclose inline text which represents sample (or quoted) output from a computer program. Its contents are typically rendered using the browser's default monospaced font (such as Courier or Lucida Console).
*/
func Samp(children ...rend.Node) rend.Node {
	return Element("samp", children...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/small
/*
Represents side-comments and small print, like copyright and legal text, independent of its styled presentation. By default, it renders text within it one font size smaller, such as from small to x-small.
*/
func Small(children ...rend.Node) rend.Node {
	return Element("small", children...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span
/*
A generic inline container for phrasing content, which does not inherently represent anything. It can be used to group elements for styling purposes (using the class or id attributes), or because they share attribute values, such as lang. It should be used only when no other semantic element is appropriate. <span> is very much like a div element, but div is a block-level element whereas a <span> is an inline-level element.
*/
func Span(children ...rend.Node) rend.Node {
	return Element("span", children...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/strong
/*
Indicates that its contents have strong importance, seriousness, or urgency. Browsers typically render the contents in bold type.
*/
func Strong(children ...rend.Node) rend.Node {
	return Element("strong", children...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sub
/*
Specifies inline text which should be displayed as subscript for solely typographical reasons. Subscripts are typically rendered with a lowered baseline using smaller text.
*/
func Sub(children ...rend.Node) rend.Node {
	return Element("sub", children...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sup
/*
Specifies inline text which is to be displayed as superscript for solely typographical reasons. Superscripts are usually rendered with a raised baseline using smaller text.
*/
func Sup(children ...rend.Node) rend.Node {
	return Element("sup", children...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/time
/*
Represents a specific period in time. It may include the datetime attribute to translate dates into machine-readable format, allowing for better search engine results or custom features such as reminders.
*/
func Time(children ...rend.Node) rend.Node {
	return Element("time", children...)
}

// time attributes



// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/time/datetime

/*
This attribute indicates the time and/or date of the element and must be in one of the formats described below.
*/
func TimeDatetimeAttr(value ...any) rend.Node {
	return Attr("datetime", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/u
/*
Represents a span of inline text which should be rendered in a way that indicates that it has a non-textual annotation. This is rendered by default as a simple solid underline but may be altered using CSS.
*/
func U(children ...rend.Node) rend.Node {
	return Element("u", children...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/var
/*
Represents the name of a variable in a mathematical expression or a programming context. It's typically presented using an italicized version of the current typeface, although that behavior is browser-dependent.
*/
func Var(children ...rend.Node) rend.Node {
	return Element("var", children...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/wbr
/*
Represents a word break opportunity—a position within text where the browser may optionally break a line, though its line-breaking rules would not otherwise create a break at that location.
*/
func Wbr(children ...rend.Node) rend.Node {
	return Void("wbr", children...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/area
/*
Defines an area inside an image map that has predefined clickable areas. An image map allows geometric areas on an image to be associated with hyperlink.
*/
func Area(children ...rend.Node) rend.Node {
	return Void("area", children...)
}

// area attributes



// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/area/alt

/*
A text string alternative to display on browsers that do not display images.
      The text should be phrased so that it presents the user with the same kind of choice as the image would offer when displayed without the alternative text.
      This attribute is required only if the href attribute is used.
*/
func AreaAltAttr(value ...any) rend.Node {
	return Attr("alt", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/area/coords

/*
The coords attribute details the coordinates of the shape attribute in size, shape, and placement of an <area>.
      This attribute must not be used if shape is set to default.



        rect: the value is x1,y1,x2,y2.
        The value specifies the coordinates of the top-left and bottom-right corner of the rectangle.
        For example, in <area shape="rect" coords="0,0,253,27" href="#" target="_blank" alt="Mozilla"> the coordinates are 0,0 and 253,27, indicating the top-left and bottom-right corners of the rectangle, respectively.


        circle: the value is x,y,radius. Value specifies the coordinates of the circle center and the radius.
        For example: <area shape="circle" coords="130,136,60" href="#" target="_blank" alt="MDN">


        poly: the value is x1,y1,x2,y2,..,xn,yn. Value specifies the coordinates of the edges of the polygon.
        If the first and last coordinate pairs are not the same, the browser will add the last coordinate pair to close the polygon


    The values are numbers of CSS pixels.
*/
func AreaCoordsAttr(value ...any) rend.Node {
	return Attr("coords", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/area/download

/*
This attribute, if present, indicates that the author intends the hyperlink to be used for downloading a resource.
      See <a> for a full description of the download attribute.
*/
func AreaDownloadAttr(value ...any) rend.Node {
	return Attr("download", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/area/href

/*
The hyperlink target for the area.
      Its value is a valid URL.
      This attribute may be omitted; if so, the <area> element does not represent a hyperlink.
*/
func AreaHrefAttr(value ...any) rend.Node {
	return Attr("href", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/area/ping

/*
Contains a space-separated list of URLs to which, when the hyperlink is followed, POST requests with the body PING will be sent by the browser (in the background).
      Typically used for tracking.
*/
func AreaPingAttr(value ...any) rend.Node {
	return Attr("ping", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/area/referrerpolicy

/*
A string indicating which referrer to use when fetching the resource:

      no-referrer: The Referer header will not be sent.
      no-referrer-when-downgrade: The Referer header will not be sent to origins without TLS (HTTPS).
      origin: The sent referrer will be limited to the origin of the referring page: its scheme, host, and port.
      origin-when-cross-origin: The referrer sent to other origins will be limited to the scheme, the host, and the port. Navigations on the same origin will still include the path.
      same-origin: A referrer will be sent for same origin, but cross-origin requests will contain no referrer information.
      strict-origin: Only send the origin of the document as the referrer when the protocol security level stays the same (HTTPS→HTTPS), but don't send it to a less secure destination (HTTPS→HTTP).
      strict-origin-when-cross-origin (default): Send a full URL when performing a same-origin request, only send the origin when the protocol security level stays the same (HTTPS→HTTPS), and send no header to a less secure destination (HTTPS→HTTP).

        unsafe-url: The referrer will include the origin and the path (but not the fragment, password, or username).
        This value is unsafe, because it leaks origins and paths from TLS-protected resources to insecure origins.
*/
func AreaReferrerpolicyAttr(value ...any) rend.Node {
	return Attr("referrerpolicy", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/area/rel

/*
For anchors containing the href attribute, this attribute specifies the relationship of the target object to the link object.
      The value is a space-separated list of link types.
      The values and their semantics will be registered by some authority that might have meaning to the document author.
      The default relationship, if no other is given, is void. Use this attribute only if the href attribute is present.
*/
func AreaRelAttr(value ...any) rend.Node {
	return Attr("rel", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/area/shape

/*
The shape of the associated hot spot. The specifications for HTML defines the values rect, which defines a rectangular region; circle, which defines a circular region; poly, which defines a polygon; and default, which indicates the entire region beyond any defined shapes.
*/
func AreaShapeAttr(value ...any) rend.Node {
	return Attr("shape", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/area/target

/*
A keyword or author-defined name of the browsing context to display the linked resource.
      The following keywords have special meanings:


      _self (default): Show the resource in the current browsing context.
      _blank: Show the resource in a new, unnamed browsing context.

        _parent: Show the resource in the parent browsing context of the current one, if the current page is inside a frame.
        If there is no parent, acts the same as _self.


        _top: Show the resource in the topmost browsing context (the browsing context that is an ancestor of the current one and has no parent).
        If there is no parent, acts the same as _self.


    Use this attribute only if the href attribute is present.

      Note: Setting target="_blank" on <area> elements implicitly provides the same rel behavior as setting rel="noopener" which does not set window.opener. See browser compatibility for support status.
*/
func AreaTargetAttr(value ...any) rend.Node {
	return Attr("target", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio
/*
Used to embed sound content in documents. It may contain one or more audio sources, represented using the src attribute or the source element: the browser will choose the most suitable one. It can also be the destination for streamed media, using a MediaStream.
*/
func Audio(children ...rend.Node) rend.Node {
	return Element("audio", children...)
}

// audio attributes



// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio/autoplay

/*
A Boolean attribute: if specified, the audio will automatically begin playback as soon as it can do so, without waiting for the entire audio file to finish downloading.

      Note: Sites that automatically play audio (or videos with an audio track) can be an unpleasant experience for users, so should be avoided when possible. If you must offer autoplay functionality, you should make it opt-in (requiring a user to specifically enable it). However, this can be useful when creating media elements whose source will be set at a later time, under user control. See our autoplay guide for additional information about how to properly use autoplay.
*/
func AudioAutoplayAttr(value ...any) rend.Node {
	return Attr("autoplay", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio/controls

/*
If this attribute is present, the browser will offer controls to allow the user to control audio playback, including volume, seeking, and pause/resume playback.
*/
func AudioControlsAttr(value ...any) rend.Node {
	return Attr("controls", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio/controlslist

/*
The controlslist attribute, when specified, helps the browser select what controls to show for the audio element whenever the browser shows its own set of controls (that is, when the controls attribute is specified).
    The allowed values are nodownload, nofullscreen and noremoteplayback.
*/
func AudioControlslistAttr(value ...any) rend.Node {
	return Attr("controlslist", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio/crossorigin

/*
This enumerated attribute indicates whether to use CORS to fetch the related audio file. CORS-enabled resources can be reused in the <canvas> element without being tainted. The allowed values are:

      anonymous

        Sends a cross-origin request without a credential. In other words, it sends the Origin: HTTP header without a cookie, X.509 certificate, or performing HTTP Basic authentication. If the server does not give credentials to the origin site (by not setting the Access-Control-Allow-Origin: HTTP header), the resource will be tainted, and its usage restricted.

      use-credentials

        Sends a cross-origin request with a credential. In other words, it sends the Origin: HTTP header with a cookie, a certificate, or performing HTTP Basic authentication. If the server does not give credentials to the origin site (through Access-Control-Allow-Credentials: HTTP header), the resource will be tainted and its usage restricted.


    When not present, the resource is fetched without a CORS request (i.e. without sending the Origin: HTTP header), preventing its non-tainted use in <canvas> elements. If invalid, it is handled as if the enumerated keyword anonymous was used. See CORS settings attributes for additional information.
*/
func AudioCrossoriginAttr(value ...any) rend.Node {
	return Attr("crossorigin", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio/anonymous

/*
Sends a cross-origin request without a credential. In other words, it sends the Origin: HTTP header without a cookie, X.509 certificate, or performing HTTP Basic authentication. If the server does not give credentials to the origin site (by not setting the Access-Control-Allow-Origin: HTTP header), the resource will be tainted, and its usage restricted.
*/
func AudioAnonymousAttr(value ...any) rend.Node {
	return Attr("anonymous", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio/use-credentials

/*
Sends a cross-origin request with a credential. In other words, it sends the Origin: HTTP header with a cookie, a certificate, or performing HTTP Basic authentication. If the server does not give credentials to the origin site (through Access-Control-Allow-Credentials: HTTP header), the resource will be tainted and its usage restricted.
*/
func AudioUseCredentialsAttr(value ...any) rend.Node {
	return Attr("use-credentials", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio/disableremoteplayback

/*
A Boolean attribute used to disable the capability of remote playback in devices that are attached using wired (HDMI, DVI, etc.) and wireless technologies (Miracast, Chromecast, DLNA, AirPlay, etc.). See this proposed specification for more information.
    In Safari, you can use x-webkit-airplay="deny" as a fallback.
*/
func AudioDisableremoteplaybackAttr(value ...any) rend.Node {
	return Attr("disableremoteplayback", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio/loop

/*
A Boolean attribute: if specified, the audio player will automatically seek back to the start upon reaching the end of the audio.
*/
func AudioLoopAttr(value ...any) rend.Node {
	return Attr("loop", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio/muted

/*
A Boolean attribute that indicates whether the audio will be initially silenced. Its default value is false.
*/
func AudioMutedAttr(value ...any) rend.Node {
	return Attr("muted", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio/preload

/*
This enumerated attribute is intended to provide a hint to the browser about what the author thinks will lead to the best user experience. It may have one of the following values:

      none: Indicates that the audio should not be preloaded.
      metadata: Indicates that only audio metadata (e.g. length) is fetched.
      auto: Indicates that the whole audio file can be downloaded, even if the user is not expected to use it.
      empty string: A synonym of the auto value.

    The default value is different for each browser. The spec advises it to be set to metadata.

      Note:

        The autoplay attribute has precedence over preload. If autoplay is specified, the browser would obviously need to start downloading the audio for playback.
        The browser is not forced by the specification to follow the value of this attribute; it is a mere hint.
*/
func AudioPreloadAttr(value ...any) rend.Node {
	return Attr("preload", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio/src

/*
The URL of the audio to embed. This is subject to HTTP access controls. This is optional; you may instead use the <source> element within the audio block to specify the audio to embed.
*/
func AudioSrcAttr(value ...any) rend.Node {
	return Attr("src", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio/HTMLMediaElement.audioTracks

/*
An AudioTrackList containing all of the media element's audio tracks. You can add a listener for addtrack to this object to be alerted when new audio tracks are added to the element.
*/
func AudioHTMLMediaElementAudioTracksAttr(value ...any) rend.Node {
	return Attr("HTMLMediaElement.audioTracks", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio/HTMLMediaElement.videoTracks

/*
Add an addtrack listener to this VideoTrackList object to be informed when video tracks are added to the element.
*/
func AudioHTMLMediaElementVideoTracksAttr(value ...any) rend.Node {
	return Attr("HTMLMediaElement.videoTracks", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio/HTMLMediaElement.textTracks

/*
Add an addtrack event listener to this TextTrackList to be notified when new text tracks are added to the element.
*/
func AudioHTMLMediaElementTextTracksAttr(value ...any) rend.Node {
	return Attr("HTMLMediaElement.textTracks", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img
/*
Embeds an image into the document.
*/
func Img(children ...rend.Node) rend.Node {
	return Void("img", children...)
}

// img attributes



// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img/alt

/*
Defines text that can replace the image in the page.

      Note: Browsers do not always display images. There are a number of situations in which a browser might not display images, such as:

        Non-visual browsers (such as those used by people with visual impairments)
        The user chooses not to display images (saving bandwidth, privacy reasons)
        The image is invalid or an unsupported type

      In these cases, the browser may replace the image with the text in the element's alt attribute. For these reasons and others, provide a useful value for alt whenever possible.

    Setting this attribute to an empty string (alt="") indicates that this image is not a key part of the content (it's decoration or a tracking pixel), and that non-visual browsers may omit it from rendering. Visual browsers will also hide the broken image icon if the alt attribute is empty and the image failed to display.
    This attribute is also used when copying and pasting the image to text, or saving a linked image to a bookmark.
*/
func ImgAltAttr(value ...any) rend.Node {
	return Attr("alt", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img/crossorigin

/*
Indicates if the fetching of the image must be done using a CORS request. Image data from a CORS-enabled image returned from a CORS request can be reused in the <canvas> element without being marked "tainted".
    If the crossorigin attribute is not specified, then a non-CORS request is sent (without the Origin request header), and the browser marks the image as tainted and restricts access to its image data, preventing its usage in <canvas> elements.
    If the crossorigin attribute is specified, then a CORS request is sent (with the Origin request header); but if the server does not opt into allowing cross-origin access to the image data by the origin site (by not sending any Access-Control-Allow-Origin response header, or by not including the site's origin in any Access-Control-Allow-Origin response header it does send), then the browser blocks the image from loading, and logs a CORS error to the devtools console.
    Allowed values:

      anonymous

        A CORS request is sent with credentials omitted (that is, no cookies, X.509 certificates, or Authorization request header).

      use-credentials

        The CORS request is sent with any credentials included (that is, cookies, X.509 certificates, and the Authorization request header). If the server does not opt into sharing credentials with the origin site (by sending back the Access-Control-Allow-Credentials: true response header), then the browser marks the image as tainted and restricts access to its image data.


    If the attribute has an invalid value, browsers handle it as if the anonymous value was used. See CORS settings attributes for additional information.
*/
func ImgCrossoriginAttr(value ...any) rend.Node {
	return Attr("crossorigin", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img/anonymous

/*
A CORS request is sent with credentials omitted (that is, no cookies, X.509 certificates, or Authorization request header).
*/
func ImgAnonymousAttr(value ...any) rend.Node {
	return Attr("anonymous", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img/use-credentials

/*
The CORS request is sent with any credentials included (that is, cookies, X.509 certificates, and the Authorization request header). If the server does not opt into sharing credentials with the origin site (by sending back the Access-Control-Allow-Credentials: true response header), then the browser marks the image as tainted and restricts access to its image data.
*/
func ImgUseCredentialsAttr(value ...any) rend.Node {
	return Attr("use-credentials", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img/decoding

/*
This attribute provides a hint to the browser as to whether it should perform image decoding along with rendering the other DOM content in a single presentation step that looks more "correct" (sync), or render and present the other DOM content first and then decode the image and present it later (async). In practice, async means that the next paint does not wait for the image to decode.
    It is often difficult to perceive any noticeable effect when using decoding on static <img> elements. They'll likely be initially rendered as empty images while the image files are fetched (either from the network or from the cache) and then handled independently anyway, so the "syncing" of content updates is less apparent. However, the blocking of rendering while decoding happens, while often quite small, can be measured — even if it is difficult to observe with the human eye. See What does the image decoding attribute actually do? for a more detailed analysis (tunetheweb.com, 2023).
    Using different decoding types can result in more noticeable differences when dynamically inserting <img> elements into the DOM via JavaScript — see HTMLImageElement.decoding for more details.
    Allowed values:

      sync

        Decode the image synchronously along with rendering the other DOM content, and present everything together.

      async

        Decode the image asynchronously, after rendering and presenting the other DOM content.

      auto

        No preference for the decoding mode; the browser decides what is best for the user. This is the default value.
*/
func ImgDecodingAttr(value ...any) rend.Node {
	return Attr("decoding", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img/sync

/*
Decode the image synchronously along with rendering the other DOM content, and present everything together.
*/
func ImgSyncAttr(value ...any) rend.Node {
	return Attr("sync", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img/async

/*
Decode the image asynchronously, after rendering and presenting the other DOM content.
*/
func ImgAsyncAttr(value ...any) rend.Node {
	return Attr("async", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img/auto

/*
No preference for the decoding mode; the browser decides what is best for the user. This is the default value.
*/
func ImgAutoAttr(value ...any) rend.Node {
	return Attr("auto", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img/elementtiming

/*
Marks the image for observation by the PerformanceElementTiming API. The value given becomes an identifier for the observed image element. See also the elementtiming attribute page.
*/
func ImgElementtimingAttr(value ...any) rend.Node {
	return Attr("elementtiming", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img/fetchpriority

/*
Provides a hint of the relative priority to use when fetching the image. Allowed values:

      high

        Signals a high-priority fetch relative to other images.

      low

        Signals a low-priority fetch relative to other images.

      auto

        Default: Signals automatic determination of fetch priority relative to other images.
*/
func ImgFetchpriorityAttr(value ...any) rend.Node {
	return Attr("fetchpriority", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img/high

/*
Signals a high-priority fetch relative to other images.
*/
func ImgHighAttr(value ...any) rend.Node {
	return Attr("high", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img/low

/*
Signals a low-priority fetch relative to other images.
*/
func ImgLowAttr(value ...any) rend.Node {
	return Attr("low", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img/height

/*
The intrinsic height of the image, in pixels. Must be an integer without a unit.

      Note: Including height and width enables the aspect ratio of the image to be calculated by the browser prior to the image being loaded. This aspect ratio is used to reserve the space needed to display the image, reducing or even preventing a layout shift when the image is downloaded and painted to the screen. Reducing layout shift is a major component of good user experience and web performance.
*/
func ImgHeightAttr(value ...any) rend.Node {
	return Attr("height", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img/ismap

/*
This Boolean attribute indicates that the image is part of a server-side map. If so, the coordinates where the user clicked on the image are sent to the server.

      Note: This attribute is allowed only if the <img> element is a descendant of an <a> element with a valid href attribute. This gives users without pointing devices a fallback destination.
*/
func ImgIsmapAttr(value ...any) rend.Node {
	return Attr("ismap", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img/loading

/*
Indicates how the browser should load the image:

      eager

        Loads the image immediately, regardless of whether or not the image is currently within the visible viewport (this is the default value).

      lazy

        Defers loading the image until it reaches a calculated distance from the viewport, as defined by the browser. The intent is to avoid the network and storage bandwidth needed to handle the image until it's reasonably certain that it will be needed. This generally improves the performance of the content in most typical use cases.




        Note: Loading is only deferred when JavaScript is enabled. This is an anti-tracking measure, because if a user agent supported lazy loading when scripting is disabled, it would still be possible for a site to track a user's approximate scroll position throughout a session, by strategically placing images in a page's markup such that a server can track how many images are requested and when.
        Note: Images with loading set to lazy will never be loaded if they do not intersect a visible part of an element, even if loading them would change that as unloaded images have a width and height of 0. Putting width and height on lazyloaded images fixes this issue and is a best practice, recommended by the specification. Doing so also helps prevent layout shifts.
*/
func ImgLoadingAttr(value ...any) rend.Node {
	return Attr("loading", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img/eager

/*
Loads the image immediately, regardless of whether or not the image is currently within the visible viewport (this is the default value).
*/
func ImgEagerAttr(value ...any) rend.Node {
	return Attr("eager", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img/lazy

/*
Defers loading the image until it reaches a calculated distance from the viewport, as defined by the browser. The intent is to avoid the network and storage bandwidth needed to handle the image until it's reasonably certain that it will be needed. This generally improves the performance of the content in most typical use cases.
*/
func ImgLazyAttr(value ...any) rend.Node {
	return Attr("lazy", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img/referrerpolicy

/*
A string indicating which referrer to use when fetching the resource:

      no-referrer: The Referer header will not be sent.
      no-referrer-when-downgrade: The Referer header will not be sent to origins without TLS (HTTPS).
      origin: The sent referrer will be limited to the origin of the referring page: its scheme, host, and port.
      origin-when-cross-origin: The referrer sent to other origins will be limited to the scheme, the host, and the port. Navigations on the same origin will still include the path.
      same-origin: A referrer will be sent for same origin, but cross-origin requests will contain no referrer information.
      strict-origin: Only send the origin of the document as the referrer when the protocol security level stays the same (HTTPS→HTTPS), but don't send it to a less secure destination (HTTPS→HTTP).
      strict-origin-when-cross-origin (default): Send a full URL when performing a same-origin request, only send the origin when the protocol security level stays the same (HTTPS→HTTPS), and send no header to a less secure destination (HTTPS→HTTP).
      unsafe-url: The referrer will include the origin and the path (but not the fragment, password, or username). This value is unsafe, because it leaks origins and paths from TLS-protected resources to insecure origins.
*/
func ImgReferrerpolicyAttr(value ...any) rend.Node {
	return Attr("referrerpolicy", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img/sizes

/*
One or more strings separated by commas, indicating a set of source sizes. Each source size consists of:

      A media condition. This must be omitted for the last item in the list.
      A source size value.

    Media Conditions describe properties of the viewport, not of the image. For example, (max-height: 500px) 1000px proposes to use a source of 1000px width, if the viewport is not higher than 500px.
    Source size values specify the intended display size of the image. User agents use the current source size to select one of the sources supplied by the srcset attribute, when those sources are described using width (w) descriptors. The selected source size affects the intrinsic size of the image (the image's display size if no CSS styling is applied). If the srcset attribute is absent, or contains no values with a width descriptor, then the sizes attribute has no effect.
*/
func ImgSizesAttr(value ...any) rend.Node {
	return Attr("sizes", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img/src

/*
The image URL. Mandatory for the <img> element. On browsers supporting srcset, src is treated like a candidate image with a pixel density descriptor 1x, unless an image with this pixel density descriptor is already defined in srcset, or unless srcset contains w descriptors.
*/
func ImgSrcAttr(value ...any) rend.Node {
	return Attr("src", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img/srcset

/*
One or more strings separated by commas, indicating possible image sources for the user agent to use. Each string is composed of:

      A URL to an image
      Optionally, whitespace followed by one of:

          A width descriptor (a positive integer directly followed by w). The width descriptor is divided by the source size given in the sizes attribute to calculate the effective pixel density.
          A pixel density descriptor (a positive floating point number directly followed by x).



    If no descriptor is specified, the source is assigned the default descriptor of 1x.
    It is incorrect to mix width descriptors and pixel density descriptors in the same srcset attribute. Duplicate descriptors (for instance, two sources in the same srcset which are both described with 2x) are also invalid.
    If the srcset attribute uses width descriptors, the sizes attribute must also be present, or the srcset itself will be ignored.
    The user agent selects any of the available sources at its discretion. This provides them with significant leeway to tailor their selection based on things like user preferences or bandwidth conditions. See our Responsive images tutorial for an example.
*/
func ImgSrcsetAttr(value ...any) rend.Node {
	return Attr("srcset", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img/width

/*
The intrinsic width of the image in pixels. Must be an integer without a unit.
*/
func ImgWidthAttr(value ...any) rend.Node {
	return Attr("width", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img/usemap

/*
The partial URL (starting with #) of an image map associated with the element.

      Note: You cannot use this attribute if the <img> element is inside an <a> or <button> element.
*/
func ImgUsemapAttr(value ...any) rend.Node {
	return Attr("usemap", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img/align

/*
Aligns the image with its surrounding context. Use the float and/or vertical-align CSS properties instead of this attribute. Allowed values:

      top

        Equivalent to vertical-align: top or vertical-align: text-top

      middle

        Equivalent to vertical-align: -moz-middle-with-baseline

      bottom

        The default, equivalent to vertical-align: unset or vertical-align: initial

      left

        Equivalent to float: left

      right

        Equivalent to float: right
*/
func ImgAlignAttr(value ...any) rend.Node {
	return Attr("align", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img/top

/*
Equivalent to vertical-align: top or vertical-align: text-top
*/
func ImgTopAttr(value ...any) rend.Node {
	return Attr("top", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img/middle

/*
Equivalent to vertical-align: -moz-middle-with-baseline
*/
func ImgMiddleAttr(value ...any) rend.Node {
	return Attr("middle", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img/bottom

/*
The default, equivalent to vertical-align: unset or vertical-align: initial
*/
func ImgBottomAttr(value ...any) rend.Node {
	return Attr("bottom", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img/left

/*
Equivalent to float: left
*/
func ImgLeftAttr(value ...any) rend.Node {
	return Attr("left", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img/right

/*
Equivalent to float: right
*/
func ImgRightAttr(value ...any) rend.Node {
	return Attr("right", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img/border

/*
The width of a border around the image. Use the border CSS property instead.
*/
func ImgBorderAttr(value ...any) rend.Node {
	return Attr("border", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img/hspace

/*
The number of pixels of white space on the left and right of the image. Use the margin CSS property instead.
*/
func ImgHspaceAttr(value ...any) rend.Node {
	return Attr("hspace", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img/longdesc

/*
A link to a more detailed description of the image. Possible values are a URL or an element id.

      Note: This attribute is mentioned in the latest W3C version, HTML 5.2, but has been removed from the WHATWG's HTML Living Standard. It has an uncertain future; authors should use a WAI-ARIA alternative such as aria-describedby or aria-details.
*/
func ImgLongdescAttr(value ...any) rend.Node {
	return Attr("longdesc", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img/name

/*
A name for the element. Use the id attribute instead.
*/
func ImgNameAttr(value ...any) rend.Node {
	return Attr("name", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img/vspace

/*
The number of pixels of white space above and below the image. Use the margin CSS property instead.
*/
func ImgVspaceAttr(value ...any) rend.Node {
	return Attr("vspace", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/map
/*
Used with <area> elements to define an image map (a clickable link area).
*/
func Map(children ...rend.Node) rend.Node {
	return Element("map", children...)
}

// map attributes



// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/map/name

/*
The name attribute gives the map a name so that it can be referenced. The attribute must be present and must have a non-empty value with no space characters. The value of the name attribute must not be equal to the value of the name attribute of another <map> element in the same document. If the id attribute is also specified, both attributes must have the same value.
*/
func MapNameAttr(value ...any) rend.Node {
	return Attr("name", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/track
/*
Used as a child of the media elements, audio and video. It lets you specify timed text tracks (or time-based data), for example to automatically handle subtitles. The tracks are formatted in WebVTT format (.vtt files)—Web Video Text Tracks.
*/
func Track(children ...rend.Node) rend.Node {
	return Void("track", children...)
}

// track attributes



// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/track/default

/*
This attribute indicates that the track should be enabled unless the user's preferences indicate that another track is more appropriate. This may only be used on one track element per media element.
*/
func TrackDefaultAttr(value ...any) rend.Node {
	return Attr("default", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/track/kind

/*
How the text track is meant to be used. If omitted the default kind is subtitles. If the attribute contains an invalid value, it will use metadata (Versions of Chrome earlier than 52 treated an invalid value as subtitles). The following keywords are allowed:

      subtitles

          Subtitles provide translation of content that cannot be understood by the viewer. For example speech or text that is not English in an English language film.
          Subtitles may contain additional content, usually extra background information. For example the text at the beginning of the Star Wars films, or the date, time, and location of a scene.


      captions

          Closed captions provide a transcription and possibly a translation of audio.
          It may include important non-verbal information such as music cues or sound effects. It may indicate the cue's source (e.g. music, text, character).
          Suitable for users who are deaf or when the sound is muted.


      descriptions

          Textual description of the video content.
          Suitable for users who are blind or where the video cannot be seen.


      chapters

          Chapter titles are intended to be used when the user is navigating the media resource.


      metadata

          Tracks used by scripts. Not visible to the user.
*/
func TrackKindAttr(value ...any) rend.Node {
	return Attr("kind", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/track/label

/*
A user-readable title of the text track which is used by the browser when listing available text tracks.
*/
func TrackLabelAttr(value ...any) rend.Node {
	return Attr("label", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/track/src

/*
Address of the track (.vtt file). Must be a valid URL. This attribute must be specified and its URL value must have the same origin as the document — unless the <audio> or <video> parent element of the track element has a crossorigin attribute.
*/
func TrackSrcAttr(value ...any) rend.Node {
	return Attr("src", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/track/srclang

/*
Language of the track text data. It must be a valid BCP 47 language tag. If the kind attribute is set to subtitles, then srclang must be defined.
*/
func TrackSrclangAttr(value ...any) rend.Node {
	return Attr("srclang", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video
/*
Embeds a media player which supports video playback into the document. You can also use <video> for audio content, but the audio element may provide a more appropriate user experience.
*/
func Video(children ...rend.Node) rend.Node {
	return Element("video", children...)
}

// video attributes



// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video/autoplay

/*
A Boolean attribute; if specified, the video automatically begins to play back as soon as it can do so without stopping to finish loading the data.

      Note: Sites that automatically play audio (or videos with an audio track) can be an unpleasant experience for users, so should be avoided when possible. If you must offer autoplay functionality, you should make it opt-in (requiring a user to specifically enable it). However, this can be useful when creating media elements whose source will be set at a later time, under user control. See our autoplay guide for additional information about how to properly use autoplay.

    To disable video autoplay, autoplay="false" will not work; the video will autoplay if the attribute is there in the <video> tag at all. To remove autoplay, the attribute needs to be removed altogether.
    In some browsers (e.g. Chrome 70.0) autoplay doesn't work if no muted attribute is present.
*/
func VideoAutoplayAttr(value ...any) rend.Node {
	return Attr("autoplay", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video/controls

/*
If this attribute is present, the browser will offer controls to allow the user to control video playback, including volume, seeking, and pause/resume playback.
*/
func VideoControlsAttr(value ...any) rend.Node {
	return Attr("controls", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video/controlslist

/*
The controlslist attribute, when specified, helps the browser select what controls to show for the video element whenever the browser shows its own set of controls (that is, when the controls attribute is specified).
    The allowed values are nodownload, nofullscreen and noremoteplayback.
    Use the disablepictureinpicture attribute if you want to disable the Picture-In-Picture mode (and the control).
*/
func VideoControlslistAttr(value ...any) rend.Node {
	return Attr("controlslist", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video/crossorigin

/*
This enumerated attribute indicates whether to use CORS to fetch the related video. CORS-enabled resources can be reused in the <canvas> element without being tainted. The allowed values are:

      anonymous

        Sends a cross-origin request without a credential. In other words, it sends the Origin: HTTP header without a cookie, X.509 certificate, or performing HTTP Basic authentication. If the server does not give credentials to the origin site (by not setting the Access-Control-Allow-Origin: HTTP header), the resource will be tainted, and its usage restricted.

      use-credentials

        Sends a cross-origin request with a credential. In other words, it sends the Origin: HTTP header with a cookie, a certificate, or performing HTTP Basic authentication. If the server does not give credentials to the origin site (through Access-Control-Allow-Credentials: HTTP header), the resource will be tainted and its usage restricted.


    When not present, the resource is fetched without a CORS request (i.e. without sending the Origin: HTTP header), preventing its non-tainted use in <canvas> elements. If invalid, it is handled as if the enumerated keyword anonymous was used. See CORS settings attributes for additional information.
*/
func VideoCrossoriginAttr(value ...any) rend.Node {
	return Attr("crossorigin", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video/anonymous

/*
Sends a cross-origin request without a credential. In other words, it sends the Origin: HTTP header without a cookie, X.509 certificate, or performing HTTP Basic authentication. If the server does not give credentials to the origin site (by not setting the Access-Control-Allow-Origin: HTTP header), the resource will be tainted, and its usage restricted.
*/
func VideoAnonymousAttr(value ...any) rend.Node {
	return Attr("anonymous", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video/use-credentials

/*
Sends a cross-origin request with a credential. In other words, it sends the Origin: HTTP header with a cookie, a certificate, or performing HTTP Basic authentication. If the server does not give credentials to the origin site (through Access-Control-Allow-Credentials: HTTP header), the resource will be tainted and its usage restricted.
*/
func VideoUseCredentialsAttr(value ...any) rend.Node {
	return Attr("use-credentials", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video/disablepictureinpicture

/*
Prevents the browser from suggesting a Picture-in-Picture context menu or to request Picture-in-Picture automatically in some cases.
*/
func VideoDisablepictureinpictureAttr(value ...any) rend.Node {
	return Attr("disablepictureinpicture", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video/disableremoteplayback

/*
A Boolean attribute used to disable the capability of remote playback in devices that are attached using wired (HDMI, DVI, etc.) and wireless technologies (Miracast, Chromecast, DLNA, AirPlay, etc.).
    In Safari, you can use x-webkit-airplay="deny" as a fallback.
*/
func VideoDisableremoteplaybackAttr(value ...any) rend.Node {
	return Attr("disableremoteplayback", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video/height

/*
The height of the video's display area, in CSS pixels (absolute values only; no percentages).
*/
func VideoHeightAttr(value ...any) rend.Node {
	return Attr("height", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video/loop

/*
A Boolean attribute; if specified, the browser will automatically seek back to the start upon reaching the end of the video.
*/
func VideoLoopAttr(value ...any) rend.Node {
	return Attr("loop", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video/muted

/*
A Boolean attribute that indicates the default setting of the audio contained in the video. If set, the audio will be initially silenced. Its default value is false, meaning that the audio will be played when the video is played.
*/
func VideoMutedAttr(value ...any) rend.Node {
	return Attr("muted", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video/playsinline

/*
A Boolean attribute indicating that the video is to be played "inline", that is within the element's playback area. Note that the absence of this attribute does not imply that the video will always be played in fullscreen.
*/
func VideoPlaysinlineAttr(value ...any) rend.Node {
	return Attr("playsinline", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video/poster

/*
A URL for an image to be shown while the video is downloading. If this attribute isn't specified, nothing is displayed until the first frame is available, then the first frame is shown as the poster frame.
*/
func VideoPosterAttr(value ...any) rend.Node {
	return Attr("poster", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video/preload

/*
This enumerated attribute is intended to provide a hint to the browser about what the author thinks will lead to the best user experience regarding what content is loaded before the video is played. It may have one of the following values:

      none: Indicates that the video should not be preloaded.
      metadata: Indicates that only video metadata (e.g. length) is fetched.
      auto: Indicates that the whole video file can be downloaded, even if the user is not expected to use it.
      empty string: Synonym of the auto value.

    The default value is different for each browser. The spec advises it to be set to metadata.

      Note:

        The autoplay attribute has precedence over preload. If autoplay is specified, the browser would obviously need to start downloading the video for playback.
        The specification does not force the browser to follow the value of this attribute; it is a mere hint.
*/
func VideoPreloadAttr(value ...any) rend.Node {
	return Attr("preload", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video/src

/*
The URL of the video to embed. This is optional; you may instead use the <source> element within the video block to specify the video to embed.
*/
func VideoSrcAttr(value ...any) rend.Node {
	return Attr("src", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video/width

/*
The width of the video's display area, in CSS pixels (absolute values only; no percentages).
*/
func VideoWidthAttr(value ...any) rend.Node {
	return Attr("width", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video/HTMLMediaElement.audioTracks

/*
An AudioTrackList containing all of the media element's audio tracks. You can add a listener for addtrack to this object to be alerted when new audio tracks are added to the element.
*/
func VideoHTMLMediaElementAudioTracksAttr(value ...any) rend.Node {
	return Attr("HTMLMediaElement.audioTracks", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video/HTMLMediaElement.videoTracks

/*
Add an addtrack listener to this VideoTrackList object to be informed when video tracks are added to the element.
*/
func VideoHTMLMediaElementVideoTracksAttr(value ...any) rend.Node {
	return Attr("HTMLMediaElement.videoTracks", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video/HTMLMediaElement.textTracks

/*
Add an addtrack event listener to this TextTrackList to be notified when new text tracks are added to the element.
*/
func VideoHTMLMediaElementTextTracksAttr(value ...any) rend.Node {
	return Attr("HTMLMediaElement.textTracks", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/embed
/*
Embeds external content at the specified point in the document. This content is provided by an external application or other source of interactive content such as a browser plug-in.
*/
func Embed(children ...rend.Node) rend.Node {
	return Void("embed", children...)
}

// embed attributes



// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/embed/height

/*
The displayed height of the resource, in CSS pixels. This must be an absolute value; percentages are not allowed.
*/
func EmbedHeightAttr(value ...any) rend.Node {
	return Attr("height", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/embed/src

/*
The URL of the resource being embedded.
*/
func EmbedSrcAttr(value ...any) rend.Node {
	return Attr("src", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/embed/type

/*
The MIME type to use to select the plug-in to instantiate.
*/
func EmbedTypeAttr(value ...any) rend.Node {
	return Attr("type", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/embed/width

/*
The displayed width of the resource, in CSS pixels. This must be an absolute value; percentages are not allowed.
*/
func EmbedWidthAttr(value ...any) rend.Node {
	return Attr("width", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe
/*
Represents a nested browsing context, embedding another HTML page into the current one.
*/
func Iframe(children ...rend.Node) rend.Node {
	return Element("iframe", children...)
}

// iframe attributes



// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe/allow

/*
Specifies a Permissions Policy for the <iframe>. The policy defines what features are available to the <iframe> (for example, access to the microphone, camera, battery, web-share, etc.) based on the origin of the request.
    See iframes in the Permissions-Policy topic for examples.

      Note: A Permissions Policy specified by the allow attribute implements a further restriction on top of the policy specified in the Permissions-Policy header. It doesn't replace it.
*/
func IframeAllowAttr(value ...any) rend.Node {
	return Attr("allow", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe/allowfullscreen

/*
Set to true if the <iframe> can activate fullscreen mode by calling the requestFullscreen() method.

      Note: This attribute is considered a legacy attribute and redefined as allow="fullscreen".
*/
func IframeAllowfullscreenAttr(value ...any) rend.Node {
	return Attr("allowfullscreen", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe/allowpaymentrequest

/*
Set to true if a cross-origin <iframe> should be allowed to invoke the Payment Request API.

      Note: This attribute is considered a legacy attribute and redefined as allow="payment".
*/
func IframeAllowpaymentrequestAttr(value ...any) rend.Node {
	return Attr("allowpaymentrequest", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe/credentialless

/*
Set to true to make the <iframe> credentialless, meaning that its content will be loaded in a new, ephemeral context. It doesn't have access to the network, cookies, and storage data associated with its origin. It uses a new context local to the top-level document lifetime. In return, the Cross-Origin-Embedder-Policy (COEP) embedding rules can be lifted, so documents with COEP set can embed third-party documents that do not. See IFrame credentialless for more details.
*/
func IframeCredentiallessAttr(value ...any) rend.Node {
	return Attr("credentialless", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe/csp

/*
A Content Security Policy enforced for the embedded resource. See HTMLIFrameElement.csp for details.
*/
func IframeCspAttr(value ...any) rend.Node {
	return Attr("csp", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe/height

/*
The height of the frame in CSS pixels. Default is 150.
*/
func IframeHeightAttr(value ...any) rend.Node {
	return Attr("height", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe/loading

/*
Indicates when the browser should load the iframe:

      eager

        Load the iframe immediately on page load (this is the default value).

      lazy


          Defer loading of the iframe until it reaches a calculated distance from the visual viewport, as defined by the browser.
          The intent is to avoid using the network and storage bandwidth required to fetch the frame until the browser is reasonably certain that it will be needed.
          This improves the performance and cost in most typical use cases, in particular by reducing initial page load times.



            Note: Loading is only deferred when JavaScript is enabled.
            This is an anti-tracking measure.
*/
func IframeLoadingAttr(value ...any) rend.Node {
	return Attr("loading", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe/eager

/*
Load the iframe immediately on page load (this is the default value).
*/
func IframeEagerAttr(value ...any) rend.Node {
	return Attr("eager", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe/lazy

/*
Defer loading of the iframe until it reaches a calculated distance from the visual viewport, as defined by the browser.
          The intent is to avoid using the network and storage bandwidth required to fetch the frame until the browser is reasonably certain that it will be needed.
          This improves the performance and cost in most typical use cases, in particular by reducing initial page load times.



            Note: Loading is only deferred when JavaScript is enabled.
            This is an anti-tracking measure.
*/
func IframeLazyAttr(value ...any) rend.Node {
	return Attr("lazy", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe/name

/*
A targetable name for the embedded browsing context. This can be used in the target attribute of the <a>, <form>, or <base> elements; the formtarget attribute of the <input> or <button> elements; or the windowName parameter in the window.open() method.
*/
func IframeNameAttr(value ...any) rend.Node {
	return Attr("name", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe/referrerpolicy

/*
Indicates which referrer to send when fetching the frame's resource:

      no-referrer

        The Referer header will not be sent.

      no-referrer-when-downgrade

        The Referer header will not be sent to origins without TLS (HTTPS).

      origin

        The sent referrer will be limited to the origin of the referring page: its scheme, host, and port.

      origin-when-cross-origin

        The referrer sent to other origins will be limited to the scheme, the host, and the port. Navigations on the same origin will still include the path.

      same-origin

        A referrer will be sent for same origin, but cross-origin requests will contain no referrer information.

      strict-origin

        Only send the origin of the document as the referrer when the protocol security level stays the same (HTTPS→HTTPS), but don't send it to a less secure destination (HTTPS→HTTP).

      strict-origin-when-cross-origin (default)

        Send a full URL when performing a same-origin request, only send the origin when the protocol security level stays the same (HTTPS→HTTPS), and send no header to a less secure destination (HTTPS→HTTP).

      unsafe-url

        The referrer will include the origin and the path (but not the fragment, password, or username). This value is unsafe, because it leaks origins and paths from TLS-protected resources to insecure origins.
*/
func IframeReferrerpolicyAttr(value ...any) rend.Node {
	return Attr("referrerpolicy", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe/no-referrer

/*
The Referer header will not be sent.
*/
func IframeNoReferrerAttr(value ...any) rend.Node {
	return Attr("no-referrer", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe/no-referrer-when-downgrade

/*
The Referer header will not be sent to origins without TLS (HTTPS).
*/
func IframeNoReferrerWhenDowngradeAttr(value ...any) rend.Node {
	return Attr("no-referrer-when-downgrade", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe/origin

/*
The sent referrer will be limited to the origin of the referring page: its scheme, host, and port.
*/
func IframeOriginAttr(value ...any) rend.Node {
	return Attr("origin", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe/origin-when-cross-origin

/*
The referrer sent to other origins will be limited to the scheme, the host, and the port. Navigations on the same origin will still include the path.
*/
func IframeOriginWhenCrossOriginAttr(value ...any) rend.Node {
	return Attr("origin-when-cross-origin", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe/same-origin

/*
A referrer will be sent for same origin, but cross-origin requests will contain no referrer information.
*/
func IframeSameOriginAttr(value ...any) rend.Node {
	return Attr("same-origin", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe/strict-origin

/*
Only send the origin of the document as the referrer when the protocol security level stays the same (HTTPS→HTTPS), but don't send it to a less secure destination (HTTPS→HTTP).
*/
func IframeStrictOriginAttr(value ...any) rend.Node {
	return Attr("strict-origin", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe/strict-origin-when-cross-origin

/*
Send a full URL when performing a same-origin request, only send the origin when the protocol security level stays the same (HTTPS→HTTPS), and send no header to a less secure destination (HTTPS→HTTP).
*/
func IframeStrictOriginWhenCrossOriginAttr(value ...any) rend.Node {
	return Attr("strict-origin-when-cross-origin", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe/unsafe-url

/*
The referrer will include the origin and the path (but not the fragment, password, or username). This value is unsafe, because it leaks origins and paths from TLS-protected resources to insecure origins.
*/
func IframeUnsafeUrlAttr(value ...any) rend.Node {
	return Attr("unsafe-url", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe/sandbox

/*
Controls the restrictions applied to the content embedded in the <iframe>. The value of the attribute can either be empty to apply all restrictions, or space-separated tokens to lift particular restrictions:

      allow-downloads

        Allows downloading files through an <a> or <area> element with the download attribute, as well as through the navigation that leads to a download of a file. This works regardless of whether the user clicked on the link, or JS code initiated it without user interaction.

      allow-downloads-without-user-activation
    Experimental


        Allows for downloads to occur without a gesture from the user.

      allow-forms

        Allows the page to submit forms. If this keyword is not used, form will be displayed as normal, but submitting it will not trigger input validation, sending data to a web server or closing a dialog.

      allow-modals

        Allows the page to open modal windows by Window.alert(), Window.confirm(), Window.print() and Window.prompt(), while opening a <dialog> is allowed regardless of this keyword. It also allows the page to receive BeforeUnloadEvent event.

      allow-orientation-lock

        Lets the resource lock the screen orientation.

      allow-pointer-lock

        Allows the page to use the Pointer Lock API.

      allow-popups

        Allows popups (like from Window.open(), target="_blank", Window.showModalDialog()). If this keyword is not used, that functionality will silently fail.

      allow-popups-to-escape-sandbox

        Allows a sandboxed document to open a new browsing context without forcing the sandboxing flags upon it. This will allow, for example, a third-party advertisement to be safely sandboxed without forcing the same restrictions upon the page the ad links to. If this flag is not included, a redirected page, popup window, or new tab will be subject to the same sandbox restrictions as the originating <iframe>.

      allow-presentation

        Allows embedders to have control over whether an iframe can start a presentation session.

      allow-same-origin

        If this token is not used, the resource is treated as being from a special origin that always fails the same-origin policy (potentially preventing access to data storage/cookies and some JavaScript APIs).

      allow-scripts

        Allows the page to run scripts (but not create pop-up windows). If this keyword is not used, this operation is not allowed.

      allow-storage-access-by-user-activation
    Experimental


        Allows a document loaded in the <iframe> to use the Storage Access API to request access to unpartitioned cookies.

      allow-top-navigation

        Lets the resource navigate the top-level browsing context (the one named _top).

      allow-top-navigation-by-user-activation

        Lets the resource navigate the top-level browsing context, but only if initiated by a user gesture.

      allow-top-navigation-to-custom-protocols

        Allows navigations to non-http protocols built into browser or registered by a website. This feature is also activated by allow-popups or allow-top-navigation keyword.



      Note:

        When the embedded document has the same origin as the embedding page, it is strongly discouraged to use both allow-scripts and allow-same-origin, as that lets the embedded document remove the sandbox attribute — making it no more secure than not using the sandbox attribute at all.
        Sandboxing is useless if the attacker can display content outside a sandboxed iframe — such as if the viewer opens the frame in a new tab. Such content should be also served from a separate origin to limit potential damage.



      Note: When redirecting the user, opening a popup window, or opening a new tab from an embedded page within an <iframe> with the sandbox attribute, the new browsing context is subject to the same sandbox restrictions. This can create issues — for example, if a page embedded within an <iframe> without a sandbox="allow-forms" or sandbox="allow-popups-to-escape-sandbox" attribute set on it opens a new site in a separate tab, form submission in that new browsing context will silently fail.
*/
func IframeSandboxAttr(value ...any) rend.Node {
	return Attr("sandbox", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe/allow-downloads

/*
Allows downloading files through an <a> or <area> element with the download attribute, as well as through the navigation that leads to a download of a file. This works regardless of whether the user clicked on the link, or JS code initiated it without user interaction.
*/
func IframeAllowDownloadsAttr(value ...any) rend.Node {
	return Attr("allow-downloads", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe/allow-downloads-without-user-activation

/*
Allows for downloads to occur without a gesture from the user.
*/
func IframeAllowDownloadsWithoutUserActivationAttr(value ...any) rend.Node {
	return Attr("allow-downloads-without-user-activation", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe/allow-forms

/*
Allows the page to submit forms. If this keyword is not used, form will be displayed as normal, but submitting it will not trigger input validation, sending data to a web server or closing a dialog.
*/
func IframeAllowFormsAttr(value ...any) rend.Node {
	return Attr("allow-forms", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe/allow-modals

/*
Allows the page to open modal windows by Window.alert(), Window.confirm(), Window.print() and Window.prompt(), while opening a <dialog> is allowed regardless of this keyword. It also allows the page to receive BeforeUnloadEvent event.
*/
func IframeAllowModalsAttr(value ...any) rend.Node {
	return Attr("allow-modals", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe/allow-orientation-lock

/*
Lets the resource lock the screen orientation.
*/
func IframeAllowOrientationLockAttr(value ...any) rend.Node {
	return Attr("allow-orientation-lock", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe/allow-pointer-lock

/*
Allows the page to use the Pointer Lock API.
*/
func IframeAllowPointerLockAttr(value ...any) rend.Node {
	return Attr("allow-pointer-lock", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe/allow-popups

/*
Allows popups (like from Window.open(), target="_blank", Window.showModalDialog()). If this keyword is not used, that functionality will silently fail.
*/
func IframeAllowPopupsAttr(value ...any) rend.Node {
	return Attr("allow-popups", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe/allow-popups-to-escape-sandbox

/*
Allows a sandboxed document to open a new browsing context without forcing the sandboxing flags upon it. This will allow, for example, a third-party advertisement to be safely sandboxed without forcing the same restrictions upon the page the ad links to. If this flag is not included, a redirected page, popup window, or new tab will be subject to the same sandbox restrictions as the originating <iframe>.
*/
func IframeAllowPopupsToEscapeSandboxAttr(value ...any) rend.Node {
	return Attr("allow-popups-to-escape-sandbox", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe/allow-presentation

/*
Allows embedders to have control over whether an iframe can start a presentation session.
*/
func IframeAllowPresentationAttr(value ...any) rend.Node {
	return Attr("allow-presentation", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe/allow-same-origin

/*
If this token is not used, the resource is treated as being from a special origin that always fails the same-origin policy (potentially preventing access to data storage/cookies and some JavaScript APIs).
*/
func IframeAllowSameOriginAttr(value ...any) rend.Node {
	return Attr("allow-same-origin", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe/allow-scripts

/*
Allows the page to run scripts (but not create pop-up windows). If this keyword is not used, this operation is not allowed.
*/
func IframeAllowScriptsAttr(value ...any) rend.Node {
	return Attr("allow-scripts", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe/allow-storage-access-by-user-activation

/*
Allows a document loaded in the <iframe> to use the Storage Access API to request access to unpartitioned cookies.
*/
func IframeAllowStorageAccessByUserActivationAttr(value ...any) rend.Node {
	return Attr("allow-storage-access-by-user-activation", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe/allow-top-navigation

/*
Lets the resource navigate the top-level browsing context (the one named _top).
*/
func IframeAllowTopNavigationAttr(value ...any) rend.Node {
	return Attr("allow-top-navigation", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe/allow-top-navigation-by-user-activation

/*
Lets the resource navigate the top-level browsing context, but only if initiated by a user gesture.
*/
func IframeAllowTopNavigationByUserActivationAttr(value ...any) rend.Node {
	return Attr("allow-top-navigation-by-user-activation", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe/allow-top-navigation-to-custom-protocols

/*
Allows navigations to non-http protocols built into browser or registered by a website. This feature is also activated by allow-popups or allow-top-navigation keyword.
*/
func IframeAllowTopNavigationToCustomProtocolsAttr(value ...any) rend.Node {
	return Attr("allow-top-navigation-to-custom-protocols", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe/src

/*
The URL of the page to embed. Use a value of about:blank to embed an empty page that conforms to the same-origin policy. Also note that programmatically removing an <iframe>'s src attribute (e.g. via Element.removeAttribute()) causes about:blank to be loaded in the frame in Firefox (from version 65), Chromium-based browsers, and Safari/iOS.
*/
func IframeSrcAttr(value ...any) rend.Node {
	return Attr("src", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe/srcdoc

/*
Inline HTML to embed, overriding the src attribute. If a browser does not support the srcdoc attribute, it will fall back to the URL in the src attribute.
*/
func IframeSrcdocAttr(value ...any) rend.Node {
	return Attr("srcdoc", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe/width

/*
The width of the frame in CSS pixels. Default is 300.
*/
func IframeWidthAttr(value ...any) rend.Node {
	return Attr("width", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe/align

/*
The alignment of this element with respect to the surrounding context.
*/
func IframeAlignAttr(value ...any) rend.Node {
	return Attr("align", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe/frameborder

/*
The value 1 (the default) draws a border around this frame. The value 0 removes the border around this frame, but you should instead use the CSS property border to control <iframe> borders.
*/
func IframeFrameborderAttr(value ...any) rend.Node {
	return Attr("frameborder", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe/longdesc

/*
A URL of a long description of the frame's content. Due to widespread misuse, this is not helpful for non-visual browsers.
*/
func IframeLongdescAttr(value ...any) rend.Node {
	return Attr("longdesc", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe/marginheight

/*
The amount of space in pixels between the frame's content and its top and bottom borders.
*/
func IframeMarginheightAttr(value ...any) rend.Node {
	return Attr("marginheight", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe/marginwidth

/*
The amount of space in pixels between the frame's content and its left and right borders.
*/
func IframeMarginwidthAttr(value ...any) rend.Node {
	return Attr("marginwidth", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe/scrolling

/*
Indicates when the browser should provide a scrollbar for the frame:

      auto

        Only when the frame's content is larger than its dimensions.

      yes

        Always show a scrollbar.

      no

        Never show a scrollbar.
*/
func IframeScrollingAttr(value ...any) rend.Node {
	return Attr("scrolling", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe/auto

/*
Only when the frame's content is larger than its dimensions.
*/
func IframeAutoAttr(value ...any) rend.Node {
	return Attr("auto", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe/yes

/*
Always show a scrollbar.
*/
func IframeYesAttr(value ...any) rend.Node {
	return Attr("yes", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe/no

/*
Never show a scrollbar.
*/
func IframeNoAttr(value ...any) rend.Node {
	return Attr("no", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/object
/*
Represents an external resource, which can be treated as an image, a nested browsing context, or a resource to be handled by a plugin.
*/
func Object(children ...rend.Node) rend.Node {
	return Element("object", children...)
}

// object attributes



// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/object/archive

/*
A space-separated list of URIs for archives of resources for the object.
*/
func ObjectArchiveAttr(value ...any) rend.Node {
	return Attr("archive", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/object/border

/*
The width of a border around the control, in pixels.
*/
func ObjectBorderAttr(value ...any) rend.Node {
	return Attr("border", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/object/classid

/*
The URI of the object's implementation. It can be used together with, or in place of, the data attribute.
*/
func ObjectClassidAttr(value ...any) rend.Node {
	return Attr("classid", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/object/codebase

/*
The base path used to resolve relative URIs specified by classid, data, or archive. If not specified, the default is the base URI of the current document.
*/
func ObjectCodebaseAttr(value ...any) rend.Node {
	return Attr("codebase", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/object/codetype

/*
The content type of the data specified by classid.
*/
func ObjectCodetypeAttr(value ...any) rend.Node {
	return Attr("codetype", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/object/data

/*
The address of the resource as a valid URL. At least one of data and type must be defined.
*/
func ObjectDataAttr(value ...any) rend.Node {
	return Attr("data", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/object/declare

/*
The presence of this Boolean attribute makes this element a declaration only. The object must be instantiated by a subsequent <object> element. Repeat the <object> element completely each time the resource is reused.
*/
func ObjectDeclareAttr(value ...any) rend.Node {
	return Attr("declare", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/object/form

/*
The form element, if any, that the object element is associated with (its form owner). The value of the attribute must be an ID of a <form> element in the same document.
*/
func ObjectFormAttr(value ...any) rend.Node {
	return Attr("form", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/object/height

/*
The height of the displayed resource, in CSS pixels. — (Absolute values only. NO percentages)
*/
func ObjectHeightAttr(value ...any) rend.Node {
	return Attr("height", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/object/name

/*
The name of valid browsing context (HTML5), or the name of the control (HTML 4).
*/
func ObjectNameAttr(value ...any) rend.Node {
	return Attr("name", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/object/standby

/*
A message that the browser can show while loading the object's implementation and data.
*/
func ObjectStandbyAttr(value ...any) rend.Node {
	return Attr("standby", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/object/type

/*
The content type of the resource specified by data. At least one of data and type must be defined.
*/
func ObjectTypeAttr(value ...any) rend.Node {
	return Attr("type", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/object/usemap

/*
A hash-name reference to a <map> element; that is a '#' followed by the value of a name of a map element.
*/
func ObjectUsemapAttr(value ...any) rend.Node {
	return Attr("usemap", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/object/width

/*
The width of the display resource, in CSS pixels. — (Absolute values only. NO percentages)
*/
func ObjectWidthAttr(value ...any) rend.Node {
	return Attr("width", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/picture
/*
Contains zero or more <source> elements and one <img> element to offer alternative versions of an image for different display/device scenarios.
*/
func Picture(children ...rend.Node) rend.Node {
	return Element("picture", children...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/portal
/*
Enables the embedding of another HTML page into the current one to enable smoother navigation into new pages.
*/
func Portal(children ...rend.Node) rend.Node {
	return Element("portal", children...)
}

// portal attributes



// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/portal/referrerpolicy

/*
Sets the referrer policy to use when requesting the page at the URL given as the value of the src attribute.
*/
func PortalReferrerpolicyAttr(value ...any) rend.Node {
	return Attr("referrerpolicy", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/portal/src

/*
The URL of the page to embed.
*/
func PortalSrcAttr(value ...any) rend.Node {
	return Attr("src", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source
/*
Specifies multiple media resources for the picture, the audio element, or the video element. It is a void element, meaning that it has no content and does not have a closing tag. It is commonly used to offer the same media content in multiple file formats in order to provide compatibility with a broad range of browsers given their differing support for image file formats and media file formats.
*/
func Source(children ...rend.Node) rend.Node {
	return Void("source", children...)
}

// source attributes



// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source/type

/*
Specifies the MIME media type of the image or other media type, optionally including a codecs parameter.
*/
func SourceTypeAttr(value ...any) rend.Node {
	return Attr("type", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source/src

/*
Specifies the URL of the media resource. Required if the parent of <source> is <audio> or <video>. Not allowed if the parent is <picture>.
*/
func SourceSrcAttr(value ...any) rend.Node {
	return Attr("src", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source/srcset

/*
Specifies a comma-separated list of one or more image URLs and their descriptors. Required if the parent of <source> is <picture>. Not allowed if the parent is <audio> or <video>.
    The list consists of strings separated by commas, indicating a set of possible images for the browser to use. Each string is composed of:

      A URL specifying an image location.
      An optional width descriptor—a positive integer directly followed by "w", such as 300w.
      An optional pixel density descriptor—a positive floating number directly followed by "x", such as 2x.

    Each string in the list must have either a width descriptor or a pixel density descriptor to be valid. These two descriptors should not be used together; only one should be used consistently throughout the list. The value of each descriptor in the list must be unique. The browser chooses the most adequate image to display at a given point of time based on these descriptors. If the descriptors are not specified, the default value used is 1x. If the sizes attribute is also present, then each string must include a width descriptor. If the browser does not support srcset, then src will be used for the default image source.
*/
func SourceSrcsetAttr(value ...any) rend.Node {
	return Attr("srcset", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source/sizes

/*
Specifies a list of source sizes that describe the final rendered width of the image. Allowed if the parent of <source> is <picture>. Not allowed if the parent is <audio> or <video>.
    The list consists of source sizes separated by commas. Each source size is media condition-length pair. Before laying the page out, the browser uses this information to determine which image defined in srcset to display. Note that sizes will take effect only if width descriptors are provided with srcset, not pixel density descriptors (i.e., 200w should be used instead of 2x).
*/
func SourceSizesAttr(value ...any) rend.Node {
	return Attr("sizes", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source/media

/*
Specifies the media query for the resource's intended media.
*/
func SourceMediaAttr(value ...any) rend.Node {
	return Attr("media", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source/height

/*
Specifies the intrinsic height of the image in pixels. Allowed if the parent of <source> is a <picture>. Not allowed if the parent is <audio> or <video>.
    The height value must be an integer without any units.
*/
func SourceHeightAttr(value ...any) rend.Node {
	return Attr("height", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source/width

/*
Specifies the intrinsic width of the image in pixels. Allowed if the parent of <source> is a <picture>. Not allowed if the parent is <audio> or <video>.
    The width value must be an integer without any units.
*/
func SourceWidthAttr(value ...any) rend.Node {
	return Attr("width", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/svg
/*
Container defining a new coordinate system and viewport. It is used as the outermost element of SVG documents, but it can also be used to embed an SVG fragment inside an SVG or HTML document.
*/
func Svg(children ...rend.Node) rend.Node {
	return Element("svg", children...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas
/*
Container element to use with either the canvas scripting API or the WebGL API to draw graphics and animations.
*/
func Canvas(children ...rend.Node) rend.Node {
	return Element("canvas", children...)
}

// canvas attributes



// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas/height

/*
The height of the coordinate space in CSS pixels. Defaults to 150.
*/
func CanvasHeightAttr(value ...any) rend.Node {
	return Attr("height", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas/moz-opaque

/*
Lets the canvas know whether translucency will be a factor. If the canvas knows there's no translucency, painting performance can be optimized. This is only supported by Mozilla-based browsers; use the standardized canvas.getContext('2d', { alpha: false }) instead.
*/
func CanvasMozOpaqueAttr(value ...any) rend.Node {
	return Attr("moz-opaque", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas/width

/*
The width of the coordinate space in CSS pixels. Defaults to 300.
*/
func CanvasWidthAttr(value ...any) rend.Node {
	return Attr("width", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/noscript
/*
Defines a section of HTML to be inserted if a script type on the page is unsupported or if scripting is currently turned off in the browser.
*/
func Noscript(children ...rend.Node) rend.Node {
	return Element("noscript", children...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script
/*
Used to embed executable code or data; this is typically used to embed or refer to JavaScript code. The <script> element can also be used with other languages, such as WebGL's GLSL shader programming language and JSON.
*/
func Script(children ...rend.Node) rend.Node {
	return Element("script", children...)
}

// script attributes



// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script/async

/*
For classic scripts, if the async attribute is present, then the classic script will be fetched in parallel to parsing and evaluated as soon as it is available.
    For module scripts, if the async attribute is present then the scripts and all their dependencies will be fetched in parallel to parsing and evaluated as soon as they are available.
    This attribute allows the elimination of parser-blocking JavaScript where the browser would have to load and evaluate scripts before continuing to parse. defer has a similar effect in this case.
    This is a boolean attribute: the presence of a boolean attribute on an element represents the true value, and the absence of the attribute represents the false value.
    See Browser compatibility for notes on browser support. See also Async scripts for asm.js.
*/
func ScriptAsyncAttr(value ...any) rend.Node {
	return Attr("async", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script/blocking

/*
This attribute explicitly indicates that certain operations should be blocked on the fetching of the script. The operations that are to be blocked must be a space-separated list of blocking attributes listed below.

      render: The rendering of content on the screen is blocked.
*/
func ScriptBlockingAttr(value ...any) rend.Node {
	return Attr("blocking", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script/crossorigin

/*
Normal script elements pass minimal information to the window.onerror for scripts which do not pass the standard CORS checks. To allow error logging for sites which use a separate domain for static media, use this attribute. See CORS settings attributes for a more descriptive explanation of its valid arguments.
*/
func ScriptCrossoriginAttr(value ...any) rend.Node {
	return Attr("crossorigin", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script/defer

/*
This Boolean attribute is set to indicate to a browser that the script is meant to be executed after the document has been parsed, but before firing DOMContentLoaded.
    Scripts with the defer attribute will prevent the DOMContentLoaded event from firing until the script has loaded and finished evaluating.

      Warning: This attribute must not be used if the src attribute is absent (i.e. for inline scripts), in this case it would have no effect.
      The defer attribute has no effect on module scripts — they defer by default.

    Scripts with the defer attribute will execute in the order in which they appear in the document.
    This attribute allows the elimination of parser-blocking JavaScript where the browser would have to load and evaluate scripts before continuing to parse. async has a similar effect in this case.
*/
func ScriptDeferAttr(value ...any) rend.Node {
	return Attr("defer", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script/fetchpriority

/*
Provides a hint of the relative priority to use when fetching an external script. Allowed values:

      high

        Signals a high-priority fetch relative to other external scripts.

      low

        Signals a low-priority fetch relative to other external scripts.

      auto

        Default: Signals automatic determination of fetch priority relative to other external scripts.
*/
func ScriptFetchpriorityAttr(value ...any) rend.Node {
	return Attr("fetchpriority", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script/high

/*
Signals a high-priority fetch relative to other external scripts.
*/
func ScriptHighAttr(value ...any) rend.Node {
	return Attr("high", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script/low

/*
Signals a low-priority fetch relative to other external scripts.
*/
func ScriptLowAttr(value ...any) rend.Node {
	return Attr("low", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script/auto

/*
Default: Signals automatic determination of fetch priority relative to other external scripts.
*/
func ScriptAutoAttr(value ...any) rend.Node {
	return Attr("auto", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script/integrity

/*
This attribute contains inline metadata that a user agent can use to verify that a fetched resource has been delivered free of unexpected manipulation. See Subresource Integrity.
*/
func ScriptIntegrityAttr(value ...any) rend.Node {
	return Attr("integrity", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script/nomodule

/*
This Boolean attribute is set to indicate that the script should not be executed in browsers that support ES modules — in effect, this can be used to serve fallback scripts to older browsers that do not support modular JavaScript code.
*/
func ScriptNomoduleAttr(value ...any) rend.Node {
	return Attr("nomodule", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script/nonce

/*
A cryptographic nonce (number used once) to allow scripts in a script-src Content-Security-Policy. The server must generate a unique nonce value each time it transmits a policy. It is critical to provide a nonce that cannot be guessed as bypassing a resource's policy is otherwise trivial.
*/
func ScriptNonceAttr(value ...any) rend.Node {
	return Attr("nonce", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script/referrerpolicy

/*
Indicates which referrer to send when fetching the script, or resources fetched by the script:

      no-referrer: The Referer header will not be sent.
      no-referrer-when-downgrade: The Referer header will not be sent to origins without TLS (HTTPS).
      origin: The sent referrer will be limited to the origin of the referring page: its scheme, host, and port.
      origin-when-cross-origin: The referrer sent to other origins will be limited to the scheme, the host, and the port. Navigations on the same origin will still include the path.
      same-origin: A referrer will be sent for same origin, but cross-origin requests will contain no referrer information.
      strict-origin: Only send the origin of the document as the referrer when the protocol security level stays the same (HTTPS→HTTPS), but don't send it to a less secure destination (HTTPS→HTTP).
      strict-origin-when-cross-origin (default): Send a full URL when performing a same-origin request, only send the origin when the protocol security level stays the same (HTTPS→HTTPS), and send no header to a less secure destination (HTTPS→HTTP).
      unsafe-url: The referrer will include the origin and the path (but not the fragment, password, or username). This value is unsafe, because it leaks origins and paths from TLS-protected resources to insecure origins.


      Note: An empty string value ("") is both the default value, and a fallback value if referrerpolicy is not supported. If referrerpolicy is not explicitly specified on the <script> element, it will adopt a higher-level referrer policy, i.e. one set on the whole document or domain. If a higher-level policy is not available, the empty string is treated as being equivalent to strict-origin-when-cross-origin.
*/
func ScriptReferrerpolicyAttr(value ...any) rend.Node {
	return Attr("referrerpolicy", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script/src

/*
This attribute specifies the URI of an external script; this can be used as an alternative to embedding a script directly within a document.
*/
func ScriptSrcAttr(value ...any) rend.Node {
	return Attr("src", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script/type

/*
This attribute indicates the type of script represented.
      The value of this attribute will be one of the following:


      Attribute is not set (default), an empty string, or a JavaScript MIME type


          Indicates that the script is a "classic script", containing JavaScript code.
          Authors are encouraged to omit the attribute if the script refers to JavaScript code rather than specify a MIME type.
          JavaScript MIME types are listed in the IANA media types specification.


      importmap


          This value indicates that the body of the element contains an import map.
          The import map is a JSON object that developers can use to control how the browser resolves module specifiers when importing JavaScript modules.


      module


          This value causes the code to be treated as a JavaScript module.
          The processing of the script contents is deferred.
          The charset and defer attributes have no effect.
          For information on using module, see our JavaScript modules guide.
          Unlike classic scripts, module scripts require the use of the CORS protocol for cross-origin fetching.


      speculationrules
    Experimental



          This value indicates that the body of the element contains speculation rules.
          Speculation rules take the form of a JSON object that determine what resources should be prefetched or prerendered by the browser. This is part of the Speculation Rules API.


      Any other value


          The embedded content is treated as a data block, and won't be processed by the browser.
          Developers must use a valid MIME type that is not a JavaScript MIME type to denote data blocks.
          All of the other attributes will be ignored, including the src attribute.
*/
func ScriptTypeAttr(value ...any) rend.Node {
	return Attr("type", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script/importmap

/*
This value indicates that the body of the element contains an import map.
          The import map is a JSON object that developers can use to control how the browser resolves module specifiers when importing JavaScript modules.
*/
func ScriptImportmapAttr(value ...any) rend.Node {
	return Attr("importmap", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script/module

/*
This value causes the code to be treated as a JavaScript module.
          The processing of the script contents is deferred.
          The charset and defer attributes have no effect.
          For information on using module, see our JavaScript modules guide.
          Unlike classic scripts, module scripts require the use of the CORS protocol for cross-origin fetching.
*/
func ScriptModuleAttr(value ...any) rend.Node {
	return Attr("module", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script/speculationrules

/*
This value indicates that the body of the element contains speculation rules.
          Speculation rules take the form of a JSON object that determine what resources should be prefetched or prerendered by the browser. This is part of the Speculation Rules API.
*/
func ScriptSpeculationrulesAttr(value ...any) rend.Node {
	return Attr("speculationrules", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script/charset

/*
If present, its value must be an ASCII case-insensitive match for "utf-8". It's unnecessary to specify the charset attribute, because documents must use UTF-8, and the script element inherits its character encoding from the document.
*/
func ScriptCharsetAttr(value ...any) rend.Node {
	return Attr("charset", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script/language

/*
Like the type attribute, this attribute identifies the scripting language in use. Unlike the type attribute, however, this attribute's possible values were never standardized. The type attribute should be used instead.
*/
func ScriptLanguageAttr(value ...any) rend.Node {
	return Attr("language", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/del
/*
Represents a range of text that has been deleted from a document. This can be used when rendering "track changes" or source code diff information, for example. The <ins> element can be used for the opposite purpose: to indicate text that has been added to the document.
*/
func Del(children ...rend.Node) rend.Node {
	return Element("del", children...)
}

// del attributes



// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/del/cite

/*
A URI for a resource that explains the change (for example, meeting minutes).
*/
func DelCiteAttr(value ...any) rend.Node {
	return Attr("cite", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/del/datetime

/*
This attribute indicates the time and date of the change and must be a valid date string with an optional time. If the value cannot be parsed as a date with an optional time string, the element does not have an associated timestamp. For the format of the string without a time, see Date strings. The format of the string if it includes both date and time is covered in Local date and time strings.
*/
func DelDatetimeAttr(value ...any) rend.Node {
	return Attr("datetime", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ins
/*
Represents a range of text that has been added to a document. You can use the <del> element to similarly represent a range of text that has been deleted from the document.
*/
func Ins(children ...rend.Node) rend.Node {
	return Element("ins", children...)
}

// ins attributes



// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ins/cite

/*
This attribute defines the URI of a resource that explains the change, such as a link to meeting minutes or a ticket in a troubleshooting system.
*/
func InsCiteAttr(value ...any) rend.Node {
	return Attr("cite", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ins/datetime

/*
This attribute indicates the time and date of the change and must be a valid date with an optional time string. If the value cannot be parsed as a date with an optional time string, the element does not have an associated timestamp. For the format of the string without a time, see Format of a valid date string. The format of the string if it includes both date and time is covered in Format of a valid local date and time string.
*/
func InsDatetimeAttr(value ...any) rend.Node {
	return Attr("datetime", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption
/*
Specifies the caption (or title) of a table.
*/
func Caption(children ...rend.Node) rend.Node {
	return Element("caption", children...)
}

// caption attributes



// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption/align

/*
Specifies on which side of the table the caption should be displayed. The possible enumerated values are left, top, right, or bottom. Use the caption-side and text-align CSS properties instead, as this attribute is deprecated.
*/
func CaptionAlignAttr(value ...any) rend.Node {
	return Attr("align", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col
/*
Defines one or more columns in a column group represented by its implicit or explicit parent <colgroup> element. The <col> element is only valid as a child of a <colgroup> element that has no span attribute defined.
*/
func Col(children ...rend.Node) rend.Node {
	return Void("col", children...)
}

// col attributes



// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col/span

/*
Specifies the number of consecutive columns the <col> element spans. The value must be a positive integer greater than zero. If not present, its default value is 1.
*/
func ColSpanAttr(value ...any) rend.Node {
	return Attr("span", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col/align

/*
Specifies the horizontal alignment of each column cell. The possible enumerated values are left, center, right, justify, and char. When supported, the char value aligns the textual content on the character defined in the char attribute and on offset defined by the charoff attribute. Note that this attribute overrides the specified align of its <colgroup> parent element. Use the text-align CSS property on the <td> and <th> elements instead, as this attribute is deprecated.

      Note: Setting text-align on the <col> element has no effect as <col> has no descendants, and therefore no elements inherit from it.
      If the table does not use a colspan attribute, use the td:nth-of-type(an+b) CSS selector. Set a to zero and b to the position of the column in the table, e.g. td:nth-of-type(2) { text-align: right; } to right-align the second column cells.
      If the table does use a colspan attribute, the effect can be achieved by combining adequate CSS attribute selectors like [colspan=n], though this is not trivial.
*/
func ColAlignAttr(value ...any) rend.Node {
	return Attr("align", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col/bgcolor

/*
Defines the background color of each column cell. The value is an HTML color; either a 6-digit hexadecimal RGB code, prefixed by a '#', or a color keyword. Other CSS <color> values are not supported. Use the background-color CSS property instead, as this attribute is deprecated.
*/
func ColBgcolorAttr(value ...any) rend.Node {
	return Attr("bgcolor", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col/char

/*
Specifies the alignment of the content to a character of each column cell. Typical values for this include a period (.) when attempting to align numbers or monetary values. If align is not set to char, this attribute is ignored, though it will still override the specified char of its <colgroup> parent element.
*/
func ColCharAttr(value ...any) rend.Node {
	return Attr("char", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col/charoff

/*
Specifies the number of characters to offset the column cell content from the alignment character specified by the char attribute.
*/
func ColCharoffAttr(value ...any) rend.Node {
	return Attr("charoff", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col/valign

/*
Specifies the vertical alignment of each column cell. The possible enumerated values are baseline, bottom, middle, and top. Note that this attribute overrides the specified valign of its <colgroup> parent element. Use the vertical-align CSS property on the <td> and <th> elements instead, as this attribute is deprecated.

      Note: Setting vertical-align on the <col> element has no effect as <col> has no descendants, and therefore no elements inherit from it.
      If the table does not use a colspan attribute, use the td:nth-of-type(an+b) CSS selector. Set a to zero and b to the position of the column in the table, e.g. td:nth-of-type(2) { vertical-align: middle; } to center the second column cells vertically.
      If the table does use a colspan attribute, the effect can be achieved by combining adequate CSS attribute selectors like [colspan=n], though this is not trivial.
*/
func ColValignAttr(value ...any) rend.Node {
	return Attr("valign", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col/width

/*
Specifies a default width for each column. In addition to the standard pixel and percentage values, this attribute can take the special form 0*, which means that the width of each column spanned should be the minimum width necessary to hold the column's contents. Relative widths such as 5* can also be used. Note that this attribute overrides the specified width of its <colgroup> parent element. Use the width CSS property instead, as this attribute is deprecated.
*/
func ColWidthAttr(value ...any) rend.Node {
	return Attr("width", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/colgroup
/*
Defines a group of columns within a table.
*/
func Colgroup(children ...rend.Node) rend.Node {
	return Element("colgroup", children...)
}

// colgroup attributes



// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/colgroup/span

/*
Specifies the number of consecutive columns the <colgroup> element spans. The value must be a positive integer greater than zero. If not present, its default value is 1.

      Note: The span attribute is not permitted if there are one or more <col> elements within the <colgroup>.
*/
func ColgroupSpanAttr(value ...any) rend.Node {
	return Attr("span", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/colgroup/align

/*
Specifies the horizontal alignment of each column group cell. The possible enumerated values are left, center, right, justify, and char. When supported, the char value aligns the textual content on the character defined in the char attribute and the offset defined by the charoff attribute. Note that the descendant <col> elements may override this value using their own align attribute. Use the text-align CSS property on the <td> and <th> elements instead, as this attribute is deprecated.

      Note: Setting text-align on the <colgroup> element has no effect as <td> and <th> elements are not descendants of the <colgroup> element, and therefore they do not inherit from it.
      If the table does not use a colspan attribute, use the td:nth-of-type(an+b) CSS selector per column, where a is the total number of the columns in the table and b is the ordinal position of the column in the table, e.g. td:nth-of-type(7n+2) { text-align: right; } to right-align the second column cells.
      If the table does use a colspan attribute, the effect can be achieved by combining adequate CSS attribute selectors like [colspan=n], though this is not trivial.
*/
func ColgroupAlignAttr(value ...any) rend.Node {
	return Attr("align", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/colgroup/bgcolor

/*
Defines the background color of each column group cell. The value is an HTML color; either a 6-digit hexadecimal RGB code, prefixed by a '#', or a color keyword. Other CSS <color> values are not supported. Use the background-color CSS property instead, as this attribute is deprecated.
*/
func ColgroupBgcolorAttr(value ...any) rend.Node {
	return Attr("bgcolor", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/colgroup/char

/*
Specifies the alignment of the content to a character of each column group cell. Typical values for this include a period (.) when attempting to align numbers or monetary values. If align is not set to char, this attribute is ignored, though it will still be used as the default value for the align of the <col> elements which are members of this column group.
*/
func ColgroupCharAttr(value ...any) rend.Node {
	return Attr("char", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/colgroup/charoff

/*
Specifies the number of characters to offset the column group cell content from the alignment character specified by the char attribute.
*/
func ColgroupCharoffAttr(value ...any) rend.Node {
	return Attr("charoff", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/colgroup/valign

/*
Specifies the vertical alignment of each column group cell. The possible enumerated values are baseline, bottom, middle, and top. Note that the descendant <col> elements may override this value using their own valign attribute. Use the vertical-align CSS property on the <td> and <th> elements instead, as this attribute is deprecated.

      Note: Setting vertical-align on the <colgroup> element has no effect as <td> and <th> elements are not descendants of the <colgroup> element, and therefore they do not inherit from it.
      If the table does not use a colspan attribute, use the td:nth-of-type() CSS selector per column, e.g. td:nth-of-type(2) { vertical-align: middle; } to center the second column cells vertically.
      If the table does use a colspan attribute, the effect can be achieved by combining adequate CSS attribute selectors like [colspan=n], though this is not trivial.
*/
func ColgroupValignAttr(value ...any) rend.Node {
	return Attr("valign", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/colgroup/width

/*
Specifies a default width for each column in the current column group. In addition to the standard pixel and percentage values, this attribute can take the special form 0*, which means that the width of each column spanned should be the minimum width necessary to hold the column's contents. Relative widths such as 5* can also be used. Note that the descendant <col> elements may override this value using their own width attribute. Use the width CSS property instead, as this attribute is deprecated.
*/
func ColgroupWidthAttr(value ...any) rend.Node {
	return Attr("width", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table
/*
Represents tabular data—that is, information presented in a two-dimensional table comprised of rows and columns of cells containing data.
*/
func Table(children ...rend.Node) rend.Node {
	return Element("table", children...)
}

// table attributes



// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table/align

/*
Specifies the horizontal alignment of the table within its parent element. The possible enumerated values are left, center, and right. Use the margin-inline-start and margin-inline-end CSS properties instead, as this attribute is deprecated.
*/
func TableAlignAttr(value ...any) rend.Node {
	return Attr("align", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table/bgcolor

/*
Defines the background color of the table. The value is an HTML color; either a 6-digit hexadecimal RGB code, prefixed by a '#', or a color keyword. Other CSS <color> values are not supported. Use the background-color CSS property instead, as this attribute is deprecated.
*/
func TableBgcolorAttr(value ...any) rend.Node {
	return Attr("bgcolor", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table/border

/*
Defines, as a non-negative integer value (in pixels), the size of the frame surrounding the table. If set to 0, the frame attribute is set to void. Use the border CSS property instead, as this attribute is deprecated.
*/
func TableBorderAttr(value ...any) rend.Node {
	return Attr("border", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table/cellpadding

/*
Defines the space between the content of a cell and its border, displayed or not. If the cellpadding's length is defined in pixels, this pixel-sized space will be applied to all four sides of the cell's content. If the length is defined using a percentage value, the content will be centered and the total vertical space (top and bottom) will represent this value. The same is true for the total horizontal space (left and right). Apply the border-collapse CSS property to the <table> element, with its value set to collapse, and the padding CSS property to the <td> elements instead, as this attribute is deprecated.
*/
func TableCellpaddingAttr(value ...any) rend.Node {
	return Attr("cellpadding", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table/cellspacing

/*
Defines the size of the space between two cells in a percentage value or pixels. The attribute is applied both horizontally and vertically, to the space between the top of the table and the cells of the first row, the left of the table and the first column, the right of the table and the last column and the bottom of the table and the last row. Apply the border-spacing CSS property to the <table> element instead, as this attribute is deprecated. border-spacing does not have any effect if the border-collapse CSS property is set to collapse.
*/
func TableCellspacingAttr(value ...any) rend.Node {
	return Attr("cellspacing", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table/frame

/*
Defines which side of the frame surrounding the table must be displayed. The possible enumerated values are void, above, below, hsides, vsides, lhs, rhs, box and border. Use the border-style and border-width CSS properties instead, as this attribute is deprecated.
*/
func TableFrameAttr(value ...any) rend.Node {
	return Attr("frame", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table/rules

/*
Defines where rules (borders) are displayed in the table. The possible enumerated values are none (default value), groups (<thead>, <tbody>, and <tfoot> elements), rows (horizontal lines), cols (vertical lines), and all (border around every cell). Use the border CSS property on the appropriate table-related elements, as well as on the <table> itself, instead, as this attribute is deprecated.
*/
func TableRulesAttr(value ...any) rend.Node {
	return Attr("rules", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table/summary

/*
Defines an alternative text that summarizes the content of the table. Use the <caption> element instead, as this attribute is deprecated.
*/
func TableSummaryAttr(value ...any) rend.Node {
	return Attr("summary", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table/width

/*
Specifies the width of the table. Use the width CSS property instead, as this attribute is deprecated.

      Note: While no HTML specification includes height as a <table> attribute, some browsers support a non-standard interpretation of height. The unitless value sets a minimum absolute height in pixels. If set as a percent value, the minimum table height will be relative to the parent container's height. Use the min-height CSS property instead, as this attribute is deprecated.
*/
func TableWidthAttr(value ...any) rend.Node {
	return Attr("width", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tbody
/*
Encapsulates a set of table rows (<tr> elements), indicating that they comprise the body of a table's (main) data.
*/
func Tbody(children ...rend.Node) rend.Node {
	return Element("tbody", children...)
}

// tbody attributes



// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tbody/align

/*
Specifies the horizontal alignment of each body cell. The possible enumerated values are left, center, right, justify, and char. When supported, the char value aligns the textual content on the character defined in the char attribute and on offset defined by the charoff attribute. Use the text-align CSS property instead, as this attribute is deprecated.
*/
func TbodyAlignAttr(value ...any) rend.Node {
	return Attr("align", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tbody/bgcolor

/*
Defines the background color of each body cell. The value is an HTML color; either a 6-digit hexadecimal RGB code, prefixed by a '#', or a color keyword. Other CSS <color> values are not supported. Use the background-color CSS property instead, as this attribute is deprecated.
*/
func TbodyBgcolorAttr(value ...any) rend.Node {
	return Attr("bgcolor", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tbody/char

/*
Specifies the alignment of the content to a character of each body cell. Typical values for this include a period (.) when attempting to align numbers or monetary values. If align is not set to char, this attribute is ignored.
*/
func TbodyCharAttr(value ...any) rend.Node {
	return Attr("char", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tbody/charoff

/*
Specifies the number of characters to offset the body cell content from the alignment character specified by the char attribute.
*/
func TbodyCharoffAttr(value ...any) rend.Node {
	return Attr("charoff", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tbody/valign

/*
Specifies the vertical alignment of each body cell. The possible enumerated values are baseline, bottom, middle, and top. Use the vertical-align CSS property instead, as this attribute is deprecated.
*/
func TbodyValignAttr(value ...any) rend.Node {
	return Attr("valign", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td
/*
A child of the <tr> element, it defines a cell of a table that contains data.
*/
func Td(children ...rend.Node) rend.Node {
	return Element("td", children...)
}

// td attributes



// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td/colspan

/*
Contains a non-negative integer value that indicates how many columns the data cell spans or extends. The default value is 1. User agents dismiss values higher than 1000 as incorrect, setting to the default value (1).
*/
func TdColspanAttr(value ...any) rend.Node {
	return Attr("colspan", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td/headers

/*
Contains a list of space-separated strings, each corresponding to the id attribute of the <th> elements that provide headings for this table cell.
*/
func TdHeadersAttr(value ...any) rend.Node {
	return Attr("headers", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td/rowspan

/*
Contains a non-negative integer value that indicates for how many rows the data cell spans or extends. The default value is 1; if its value is set to 0, it extends until the end of the table grouping section (<thead>, <tbody>, <tfoot>, even if implicitly defined), that the cell belongs to. Values higher than 65534 are clipped to 65534.
*/
func TdRowspanAttr(value ...any) rend.Node {
	return Attr("rowspan", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td/abbr

/*
Contains a short abbreviated description of the data cell's content. Some user-agents, such as speech readers, may present this description before the content itself. Put the abbreviated content inside the cell and place the (longer) description in the title attribute, as this attribute is deprecated. Or, preferably, include the content within the data cell, and use CSS to visually clip overflowing text.
*/
func TdAbbrAttr(value ...any) rend.Node {
	return Attr("abbr", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td/align

/*
Specifies the horizontal alignment of the data cell. The possible enumerated values are left, center, right, justify, and char. When supported, the char value aligns the textual content on the character defined in the char attribute and the offset defined by the charoff attribute. Use the text-align CSS property instead, as this attribute is deprecated.
*/
func TdAlignAttr(value ...any) rend.Node {
	return Attr("align", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td/axis

/*
Contains a list of space-separated strings, each corresponding to the id attribute of a group of cells that the data cell applies to.
*/
func TdAxisAttr(value ...any) rend.Node {
	return Attr("axis", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td/bgcolor

/*
Defines the background color of the data cell. The value is an HTML color; either a 6-digit hexadecimal RGB code, prefixed by a '#', or a color keyword. Other CSS <color> values are not supported. Use the background-color CSS property instead, as this attribute is deprecated.
*/
func TdBgcolorAttr(value ...any) rend.Node {
	return Attr("bgcolor", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td/char

/*
Specifies the alignment of the content to a character of the data cell. Typical values for this include a period (.) when attempting to align numbers or monetary values. If align is not set to char, this attribute is ignored.
*/
func TdCharAttr(value ...any) rend.Node {
	return Attr("char", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td/charoff

/*
Specifies the number of characters to offset the data cell content from the alignment character specified by the char attribute.
*/
func TdCharoffAttr(value ...any) rend.Node {
	return Attr("charoff", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td/height

/*
Defines a recommended data cell height. Use the height CSS property instead, as this attribute is deprecated.
*/
func TdHeightAttr(value ...any) rend.Node {
	return Attr("height", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td/scope

/*
Defines the cells that the header (defined in the <th>) element relates to. The possible enumerated values are row, col, rowgroup, and colgroup. Only use this attribute with the <th> element to define the row or column for which it is a header, as this attribute is deprecated for the <td> element.
*/
func TdScopeAttr(value ...any) rend.Node {
	return Attr("scope", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td/valign

/*
Specifies the vertical alignment of the data cell. The possible enumerated values are baseline, bottom, middle, and top. Use the vertical-align CSS property instead, as this attribute is deprecated.
*/
func TdValignAttr(value ...any) rend.Node {
	return Attr("valign", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td/width

/*
Defines a recommended data cell width. Use the width CSS property instead, as this attribute is deprecated.
*/
func TdWidthAttr(value ...any) rend.Node {
	return Attr("width", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tfoot
/*
Encapsulates a set of table rows (<tr> elements), indicating that they comprise the foot of a table with information about the table's columns. This is usually a summary of the columns, e.g., a sum of the given numbers in a column.
*/
func Tfoot(children ...rend.Node) rend.Node {
	return Element("tfoot", children...)
}

// tfoot attributes



// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tfoot/align

/*
Specifies the horizontal alignment of each foot cell. The possible enumerated values are left, center, right, justify, and char. When supported, the char value aligns the textual content on the character defined in the char attribute and on offset defined by the charoff attribute. Use the text-align CSS property instead, as this attribute is deprecated.
*/
func TfootAlignAttr(value ...any) rend.Node {
	return Attr("align", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tfoot/bgcolor

/*
Defines the background color of each foot cell. The value is an HTML color; either a 6-digit hexadecimal RGB code, prefixed by a '#', or a color keyword. Other CSS <color> values are not supported. Use the background-color CSS property instead, as this attribute is deprecated.
*/
func TfootBgcolorAttr(value ...any) rend.Node {
	return Attr("bgcolor", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tfoot/char

/*
Specifies the alignment of the content to a character of each foot cell. Typical values for this include a period (.) when attempting to align numbers or monetary values. If align is not set to char, this attribute is ignored.
*/
func TfootCharAttr(value ...any) rend.Node {
	return Attr("char", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tfoot/charoff

/*
Specifies the number of characters to offset the foot cell content from the alignment character specified by the char attribute.
*/
func TfootCharoffAttr(value ...any) rend.Node {
	return Attr("charoff", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tfoot/valign

/*
Specifies the vertical alignment of each foot cell. The possible enumerated values are baseline, bottom, middle, and top. Use the vertical-align CSS property instead, as this attribute is deprecated.
*/
func TfootValignAttr(value ...any) rend.Node {
	return Attr("valign", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th
/*
A child of the <tr> element, it defines a cell as the header of a group of table cells. The nature of this group can be explicitly defined by the scope and headers attributes.
*/
func Th(children ...rend.Node) rend.Node {
	return Element("th", children...)
}

// th attributes



// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th/abbr

/*
A short, abbreviated description of the header cell's content provided as an alternative label to use for the header cell when referencing the cell in other contexts. Some user-agents, such as speech readers, may present this description before the content itself.
*/
func ThAbbrAttr(value ...any) rend.Node {
	return Attr("abbr", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th/colspan

/*
A non-negative integer value indicating how many columns the header cell spans or extends. The default value is 1. User agents dismiss values higher than 1000 as incorrect, defaulting such values to 1.
*/
func ThColspanAttr(value ...any) rend.Node {
	return Attr("colspan", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th/headers

/*
A list of space-separated strings corresponding to the id attributes of the <th> elements that provide the headers for this header cell.
*/
func ThHeadersAttr(value ...any) rend.Node {
	return Attr("headers", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th/rowspan

/*
A non-negative integer value indicating how many rows the header cell spans or extends. The default value is 1; if its value is set to 0, the header cell will extends to the end of the table grouping section (<thead>, <tbody>, <tfoot>, even if implicitly defined), that the <th> belongs to. Values higher than 65534 are clipped at 65534.
*/
func ThRowspanAttr(value ...any) rend.Node {
	return Attr("rowspan", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th/scope

/*
Defines the cells that the header (defined in the <th>) element relates to. Possible enumerated values are:

      row: the header relates to all cells of the row it belongs to;
      col: the header relates to all cells of the column it belongs to;
      rowgroup: the header belongs to a rowgroup and relates to all of its cells;
      colgroup: the header belongs to a colgroup and relates to all of its cells.

    If the scope attribute is not specified, or its value is not row, col, rowgroup, or colgroup, then browsers automatically select the set of cells to which the header cell applies.
*/
func ThScopeAttr(value ...any) rend.Node {
	return Attr("scope", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th/align

/*
Specifies the horizontal alignment of the header cell. The possible enumerated values are left, center, right, justify, and char. When supported, the char value aligns the textual content on the character defined in the char attribute and the offset defined by the charoff attribute. Use the text-align CSS property instead, as this attribute is deprecated.
*/
func ThAlignAttr(value ...any) rend.Node {
	return Attr("align", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th/axis

/*
Contains a list of space-separated strings, each corresponding to the id attribute of a group of cells that the header cell applies to. Use the scope attribute instead, as this attribute is deprecated.
*/
func ThAxisAttr(value ...any) rend.Node {
	return Attr("axis", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th/bgcolor

/*
Defines the background color of the header cell. The value is an HTML color; either a 6-digit hexadecimal RGB code, prefixed by a '#', or a color keyword. Other CSS <color> values are not supported. Use the background-color CSS property instead, as this attribute is deprecated.
*/
func ThBgcolorAttr(value ...any) rend.Node {
	return Attr("bgcolor", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th/char

/*
Specifies the alignment of the content to a character of the header cell. Typical values for this include a period (.) when attempting to align numbers or monetary values. If align is not set to char, this attribute is ignored.
*/
func ThCharAttr(value ...any) rend.Node {
	return Attr("char", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th/charoff

/*
Specifies the number of characters to offset the header cell content from the alignment character specified by the char attribute.
*/
func ThCharoffAttr(value ...any) rend.Node {
	return Attr("charoff", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th/height

/*
Defines a recommended header cell height. Use the height CSS property instead, as this attribute is deprecated.
*/
func ThHeightAttr(value ...any) rend.Node {
	return Attr("height", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th/valign

/*
Specifies the vertical alignment of the header cell. The possible enumerated values are baseline, bottom, middle, and top. Use the vertical-align CSS property instead, as this attribute is deprecated.
*/
func ThValignAttr(value ...any) rend.Node {
	return Attr("valign", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th/width

/*
Defines a recommended header cell width. Use the width CSS property instead, as this attribute is deprecated.
*/
func ThWidthAttr(value ...any) rend.Node {
	return Attr("width", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/thead
/*
Encapsulates a set of table rows (<tr> elements), indicating that they comprise the head of a table with information about the table's columns. This is usually in the form of column headers (<th> elements).
*/
func Thead(children ...rend.Node) rend.Node {
	return Element("thead", children...)
}

// thead attributes



// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/thead/align

/*
Specifies the horizontal alignment of each head cell. The possible enumerated values are left, center, right, justify, and char. When supported, the char value aligns the textual content on the character defined in the char attribute and the offset defined by the charoff attribute. Use the text-align CSS property instead, as this attribute is deprecated.
*/
func TheadAlignAttr(value ...any) rend.Node {
	return Attr("align", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/thead/bgcolor

/*
Defines the background color of each head cell. The value is an HTML color; either a 6-digit hexadecimal RGB code, prefixed by a '#', or a color keyword. Other CSS <color> values are not supported. Use the background-color CSS property instead, as this attribute is deprecated.
*/
func TheadBgcolorAttr(value ...any) rend.Node {
	return Attr("bgcolor", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/thead/char

/*
Specifies the alignment of the content to a character of each head cell. If align is not set to char, this attribute is ignored.
*/
func TheadCharAttr(value ...any) rend.Node {
	return Attr("char", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/thead/charoff

/*
Specifies the number of characters to offset the head cell content from the alignment character specified by the char attribute.
*/
func TheadCharoffAttr(value ...any) rend.Node {
	return Attr("charoff", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/thead/valign

/*
Specifies the vertical alignment of each head cell. The possible enumerated values are baseline, bottom, middle, and top. Use the vertical-align CSS property instead, as this attribute is deprecated.
*/
func TheadValignAttr(value ...any) rend.Node {
	return Attr("valign", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tr
/*
Defines a row of cells in a table. The row's cells can then be established using a mix of <td> (data cell) and <th> (header cell) elements.
*/
func Tr(children ...rend.Node) rend.Node {
	return Element("tr", children...)
}

// tr attributes



// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tr/align

/*
Specifies the horizontal alignment of each row cell. The possible enumerated values are left, center, right, justify, and char. When supported, the char value aligns the textual content on the character defined in the char attribute and on offset defined by the charoff attribute. Use the text-align CSS property instead, as this attribute is deprecated.
*/
func TrAlignAttr(value ...any) rend.Node {
	return Attr("align", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tr/bgcolor

/*
Defines the background color of each row cell. The value is an HTML color; either a 6-digit hexadecimal RGB code, prefixed by a '#', or a color keyword. Other CSS <color> values are not supported. Use the background-color CSS property instead, as this attribute is deprecated.
*/
func TrBgcolorAttr(value ...any) rend.Node {
	return Attr("bgcolor", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tr/char

/*
Specifies the alignment of the content to a character of each row cell. Typical values for this include a period (.) when attempting to align numbers or monetary values. If align is not set to char, this attribute is ignored.
*/
func TrCharAttr(value ...any) rend.Node {
	return Attr("char", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tr/charoff

/*
Specifies the number of characters to offset the row cell content from the alignment character specified by the char attribute.
*/
func TrCharoffAttr(value ...any) rend.Node {
	return Attr("charoff", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tr/valign

/*
Specifies the vertical alignment of each row cell. The possible enumerated values are baseline, bottom, middle, and top. Use the vertical-align CSS property instead, as this attribute is deprecated.
*/
func TrValignAttr(value ...any) rend.Node {
	return Attr("valign", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button
/*
An interactive element activated by a user with a mouse, keyboard, finger, voice command, or other assistive technology. Once activated, it performs an action, such as submitting a form or opening a dialog.
*/
func Button(children ...rend.Node) rend.Node {
	return Element("button", children...)
}

// button attributes



// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button/autofocus

/*
This Boolean attribute specifies that the button should have input focus when the page loads. Only one element in a document can have this attribute.
*/
func ButtonAutofocusAttr(value ...any) rend.Node {
	return Attr("autofocus", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button/disabled

/*
This Boolean attribute prevents the user from interacting with the button: it cannot be pressed or focused.
    Firefox, unlike other browsers, persists the dynamic disabled state of a <button> across page loads. To control this feature, use the autocomplete attribute.
*/
func ButtonDisabledAttr(value ...any) rend.Node {
	return Attr("disabled", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button/form

/*
The <form> element to associate the button with (its form owner). The value of this attribute must be the id of a <form> in the same document. (If this attribute is not set, the <button> is associated with its ancestor <form> element, if any.)
    This attribute lets you associate <button> elements to <form>s anywhere in the document, not just inside a <form>. It can also override an ancestor <form> element.
*/
func ButtonFormAttr(value ...any) rend.Node {
	return Attr("form", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button/formaction

/*
The URL that processes the information submitted by the button. Overrides the action attribute of the button's form owner. Does nothing if there is no form owner.
*/
func ButtonFormactionAttr(value ...any) rend.Node {
	return Attr("formaction", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button/formenctype

/*
If the button is a submit button (it's inside/associated with a <form> and doesn't have type="button"), specifies how to encode the form data that is submitted. Possible values:

      application/x-www-form-urlencoded: The default if the attribute is not used.
      multipart/form-data: Used to submit <input> elements with their type attributes set to file.
      text/plain: Specified as a debugging aid; shouldn't be used for real form submission.

    If this attribute is specified, it overrides the enctype attribute of the button's form owner.
*/
func ButtonFormenctypeAttr(value ...any) rend.Node {
	return Attr("formenctype", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button/formmethod

/*
If the button is a submit button (it's inside/associated with a <form> and doesn't have type="button"), this attribute specifies the HTTP method used to submit the form. Possible values:

      post: The data from the form are included in the body of the HTTP request when sent to the server. Use when the form contains information that shouldn't be public, like login credentials.
      get: The form data are appended to the form's action URL, with a ? as a separator, and the resulting URL is sent to the server. Use this method when the form has no side effects, like search forms.
      dialog: This method is used to indicate that the button closes the dialog with which it is associated, and does not transmit the form data at all.

    If specified, this attribute overrides the method attribute of the button's form owner.
*/
func ButtonFormmethodAttr(value ...any) rend.Node {
	return Attr("formmethod", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button/formnovalidate

/*
If the button is a submit button, this Boolean attribute specifies that the form is not to be validated when it is submitted. If this attribute is specified, it overrides the novalidate attribute of the button's form owner.
    This attribute is also available on <input type="image"> and <input type="submit"> elements.
*/
func ButtonFormnovalidateAttr(value ...any) rend.Node {
	return Attr("formnovalidate", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button/formtarget

/*
If the button is a submit button, this attribute is an author-defined name or standardized, underscore-prefixed keyword indicating where to display the response from submitting the form. This is the name of, or keyword for, a browsing context (a tab, window, or <iframe>). If this attribute is specified, it overrides the target attribute of the button's form owner. The following keywords have special meanings:

      _self: Load the response into the same browsing context as the current one. This is the default if the attribute is not specified.
      _blank: Load the response into a new unnamed browsing context — usually a new tab or window, depending on the user's browser settings.
      _parent: Load the response into the parent browsing context of the current one. If there is no parent, this option behaves the same way as _self.
      _top: Load the response into the top-level browsing context (that is, the browsing context that is an ancestor of the current one, and has no parent). If there is no parent, this option behaves the same way as _self.
*/
func ButtonFormtargetAttr(value ...any) rend.Node {
	return Attr("formtarget", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button/name

/*
The name of the button, submitted as a pair with the button's value as part of the form data, when that button is used to submit the form.
*/
func ButtonNameAttr(value ...any) rend.Node {
	return Attr("name", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button/popovertarget

/*
Turns a <button> element into a popover control button; takes the ID of the popover element to control as its value. See the Popover API landing page for more details.
*/
func ButtonPopovertargetAttr(value ...any) rend.Node {
	return Attr("popovertarget", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button/popovertargetaction

/*
Specifies the action to be performed on a popover element being controlled by a control <button>. Possible values are:

      "hide"

        The button will hide a shown popover. If you try to hide an already hidden popover, no action will be taken.

      "show"

        The button will show a hidden popover. If you try to show an already showing popover, no action will be taken.

      "toggle"

        The button will toggle a popover between showing and hidden. If the popover is hidden, it will be shown; if the popover is showing, it will be hidden. If popovertargetaction is omitted, "toggle" is the default action that will be performed by the control button.
*/
func ButtonPopovertargetactionAttr(value ...any) rend.Node {
	return Attr("popovertargetaction", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button/hide

/*
The button will hide a shown popover. If you try to hide an already hidden popover, no action will be taken.
*/
func ButtonHideAttr(value ...any) rend.Node {
	return Attr("hide", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button/show

/*
The button will show a hidden popover. If you try to show an already showing popover, no action will be taken.
*/
func ButtonShowAttr(value ...any) rend.Node {
	return Attr("show", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button/toggle

/*
The button will toggle a popover between showing and hidden. If the popover is hidden, it will be shown; if the popover is showing, it will be hidden. If popovertargetaction is omitted, "toggle" is the default action that will be performed by the control button.
*/
func ButtonToggleAttr(value ...any) rend.Node {
	return Attr("toggle", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button/type

/*
The default behavior of the button. Possible values are:

      submit: The button submits the form data to the server. This is the default if the attribute is not specified for buttons associated with a <form>, or if the attribute is an empty or invalid value.
      reset: The button resets all the controls to their initial values, like <input type="reset">. (This behavior tends to annoy users.)
      button: The button has no default behavior, and does nothing when pressed by default. It can have client-side scripts listen to the element's events, which are triggered when the events occur.
*/
func ButtonTypeAttr(value ...any) rend.Node {
	return Attr("type", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button/value

/*
Defines the value associated with the button's name when it's submitted with the form data. This value is passed to the server in params when the form is submitted using this button.
*/
func ButtonValueAttr(value ...any) rend.Node {
	return Attr("value", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist
/*
Contains a set of <option> elements that represent the permissible or recommended options available to choose from within other controls.
*/
func Datalist(children ...rend.Node) rend.Node {
	return Element("datalist", children...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/fieldset
/*
Used to group several controls as well as labels (<label>) within a web form.
*/
func Fieldset(children ...rend.Node) rend.Node {
	return Element("fieldset", children...)
}

// fieldset attributes



// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/fieldset/disabled

/*
If this Boolean attribute is set, all form controls that are descendants of the <fieldset>, are disabled, meaning they are not editable and won't be submitted along with the <form>. They won't receive any browsing events, like mouse clicks or focus-related events. By default browsers display such controls grayed out. Note that form elements inside the <legend> element won't be disabled.
*/
func FieldsetDisabledAttr(value ...any) rend.Node {
	return Attr("disabled", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/fieldset/form

/*
This attribute takes the value of the id attribute of a <form> element you want the <fieldset> to be part of, even if it is not inside the form. Please note that usage of this is confusing — if you want the <input> elements inside the <fieldset> to be associated with the form, you need to use the form attribute directly on those elements. You can check which elements are associated with a form via JavaScript, using HTMLFormElement.elements.
*/
func FieldsetFormAttr(value ...any) rend.Node {
	return Attr("form", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/fieldset/name

/*
The name associated with the group.

      Note: The caption for the fieldset is given by the first <legend> element nested inside it.
*/
func FieldsetNameAttr(value ...any) rend.Node {
	return Attr("name", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form
/*
Represents a document section containing interactive controls for submitting information.
*/
func Form(children ...rend.Node) rend.Node {
	return Element("form", children...)
}

// form attributes



// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form/accept

/*
Comma-separated content types the server accepts.

      Note: This attribute has been deprecated and should not be used. Instead, use the accept attribute on <input type=file> elements.
*/
func FormAcceptAttr(value ...any) rend.Node {
	return Attr("accept", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form/accept-charset

/*
Space-separated character encodings the server accepts. The browser uses them in the order in which they are listed. The default value means the same encoding as the page.
      (In previous versions of HTML, character encodings could also be delimited by commas.)
*/
func FormAcceptCharsetAttr(value ...any) rend.Node {
	return Attr("accept-charset", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form/autocapitalize

/*
Controls whether inputted text is automatically capitalized and, if so, in what manner. See the autocapitalize global attribute page for more information.
*/
func FormAutocapitalizeAttr(value ...any) rend.Node {
	return Attr("autocapitalize", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form/autocomplete

/*
Indicates whether input elements can by default have their values automatically completed by the browser. autocomplete attributes on form elements override it on <form>. Possible values:

      off: The browser may not automatically complete entries. (Browsers tend to ignore this for suspected login forms; see The autocomplete attribute and login fields.)
      on: The browser may automatically complete entries.
*/
func FormAutocompleteAttr(value ...any) rend.Node {
	return Attr("autocomplete", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form/name

/*
The name of the form. The value must not be the empty string, and must be unique among the form elements in the forms collection that it is in, if any.
*/
func FormNameAttr(value ...any) rend.Node {
	return Attr("name", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form/rel

/*
Controls the annotations and what kinds of links the form creates. Annotations include external, nofollow, opener, noopener, and noreferrer. Link types include help, prev, next, search, and license. The rel value is a space-separated list of these enumerated values.
*/
func FormRelAttr(value ...any) rend.Node {
	return Attr("rel", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form/action

/*
The URL that processes the form submission. This value can be overridden by a formaction attribute on a <button>, <input type="submit">, or <input type="image"> element. This attribute is ignored when method="dialog" is set.
*/
func FormActionAttr(value ...any) rend.Node {
	return Attr("action", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form/enctype

/*
If the value of the method attribute is post, enctype is the MIME type of the form submission. Possible values:

      application/x-www-form-urlencoded: The default value.
      multipart/form-data: Use this if the form contains <input> elements with type=file.
      text/plain: Useful for debugging purposes.

    This value can be overridden by formenctype attributes on <button>, <input type="submit">, or <input type="image"> elements.
*/
func FormEnctypeAttr(value ...any) rend.Node {
	return Attr("enctype", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form/method

/*
The HTTP method to submit the form with.
      The only allowed methods/values are (case insensitive):


      post: The POST method; form data sent as the request body.
      get (default): The GET; form data appended to the action URL with a ? separator. Use this method when the form has no side effects.
      dialog: When the form is inside a <dialog>, closes the dialog and causes a submit event to be fired on submission, without submitting data or clearing the form.

    This value is overridden by formmethod attributes on <button>, <input type="submit">, or <input type="image"> elements.
*/
func FormMethodAttr(value ...any) rend.Node {
	return Attr("method", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form/novalidate

/*
This Boolean attribute indicates that the form shouldn't be validated when submitted. If this attribute is not set (and therefore the form is validated), it can be overridden by a formnovalidate attribute on a <button>, <input type="submit">, or <input type="image"> element belonging to the form.
*/
func FormNovalidateAttr(value ...any) rend.Node {
	return Attr("novalidate", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form/target

/*
Indicates where to display the response after submitting the form. It is a name/keyword for a browsing context (for example, tab, window, or iframe). The following keywords have special meanings:

      _self (default): Load into the same browsing context as the current one.
      _blank: Load into a new unnamed browsing context. This provides the same behavior as setting rel="noopener" which does not set window.opener.
      _parent: Load into the parent browsing context of the current one. If no parent, behaves the same as _self.
      _top: Load into the top-level browsing context (i.e., the browsing context that is an ancestor of the current one and has no parent). If no parent, behaves the same as _self.

    This value can be overridden by a formtarget attribute on a <button>, <input type="submit">, or <input type="image"> element.
*/
func FormTargetAttr(value ...any) rend.Node {
	return Attr("target", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input
/*
Used to create interactive controls for web-based forms to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent. The <input> element is one of the most powerful and complex in all of HTML due to the sheer number of combinations of input types and attributes.
*/
func Input(children ...rend.Node) rend.Node {
	return Void("input", children...)
}

// input attributes



// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/accept

/*
Valid for the file input type only, the accept attribute defines which file types are selectable in a file upload control. See the file input type.
*/
func InputAcceptAttr(value ...any) rend.Node {
	return Attr("accept", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/alt

/*
Valid for the image button only, the alt attribute provides alternative text for the image, displaying the value of the attribute if the image src is missing or otherwise fails to load. See the image input type.
*/
func InputAltAttr(value ...any) rend.Node {
	return Attr("alt", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/autocapitalize

/*
Controls whether inputted text is automatically capitalized and, if so, in what manner. See the autocapitalize global attribute page for more information.
*/
func InputAutocapitalizeAttr(value ...any) rend.Node {
	return Attr("autocapitalize", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/autocomplete

/*
(Not a Boolean attribute!) The autocomplete attribute takes as its value a space-separated string that describes what, if any, type of autocomplete functionality the input should provide. A typical implementation of autocomplete recalls previous values entered in the same input field, but more complex forms of autocomplete can exist. For instance, a browser could integrate with a device's contacts list to autocomplete email addresses in an email input field. See autocomplete for permitted values.
    The autocomplete attribute is valid on hidden, text, search, url, tel, email, date, month, week, time, datetime-local, number, range, color, and password. This attribute has no effect on input types that do not return numeric or text data, being valid for all input types except checkbox, radio, file, or any of the button types.
    See the autocomplete attribute for additional information, including information on password security and how autocomplete is slightly different for hidden than for other input types.
*/
func InputAutocompleteAttr(value ...any) rend.Node {
	return Attr("autocomplete", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/autofocus

/*
A Boolean attribute which, if present, indicates that the input should automatically have focus when the page has finished loading (or when the <dialog> containing the element has been displayed).

      Note: An element with the autofocus attribute may gain focus before the DOMContentLoaded event is fired.

    No more than one element in the document may have the autofocus attribute. If put on more than one element, the first one with the attribute receives focus.
    The autofocus attribute cannot be used on inputs of type hidden, since hidden inputs cannot be focused.

      Warning: Automatically focusing a form control can confuse visually-impaired people using screen-reading technology and people with cognitive impairments. When autofocus is assigned, screen-readers "teleport" their user to the form control without warning them beforehand.

    Use careful consideration for accessibility when applying the autofocus attribute. Automatically focusing on a control can cause the page to scroll on load. The focus can also cause dynamic keyboards to display on some touch devices. While a screen reader will announce the label of the form control receiving focus, the screen reader will not announce anything before the label, and the sighted user on a small device will equally miss the context created by the preceding content.
*/
func InputAutofocusAttr(value ...any) rend.Node {
	return Attr("autofocus", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/capture

/*
Introduced in the HTML Media Capture specification and valid for the file input type only, the capture attribute defines which media—microphone, video, or camera—should be used to capture a new file for upload with file upload control in supporting scenarios. See the file input type.
*/
func InputCaptureAttr(value ...any) rend.Node {
	return Attr("capture", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checked

/*
Valid for both radio and checkbox types, checked is a Boolean attribute. If present on a radio type, it indicates that the radio button is the currently selected one in the group of same-named radio buttons. If present on a checkbox type, it indicates that the checkbox is checked by default (when the page loads). It does not indicate whether this checkbox is currently checked: if the checkbox's state is changed, this content attribute does not reflect the change. (Only the HTMLInputElement's checked IDL attribute is updated.)

      Note: Unlike other input controls, a checkboxes and radio buttons value are only included in the submitted data if they are currently checked. If they are, the name and the value(s) of the checked controls are submitted.
      For example, if a checkbox whose name is fruit has a value of cherry, and the checkbox is checked, the form data submitted will include fruit=cherry. If the checkbox isn't active, it isn't listed in the form data at all. The default value for checkboxes and radio buttons is on.
*/
func InputCheckedAttr(value ...any) rend.Node {
	return Attr("checked", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/dirname

/*
Valid for hidden, text, search, url, tel, and email input types, the dirname attribute enables the submission of the directionality of the element. When included, the form control will submit with two name/value pairs: the first being the name and value, and the second being the value of the dirname attribute as the name, with a value of ltr or rtl as set by the browser.
    html<form action="page.html" method="post">
  <label>
    Fruit:
    <input type="text" name="fruit" dirname="fruit-dir" value="cherry" />
  </label>
  <input type="submit" />
</form>
<!-- page.html?fruit=cherry&fruit-dir=ltr -->


      When the form above is submitted, the input cause both the name / value pair of fruit=cherry and the dirname / direction pair of fruit-dir=ltr to be sent.
      For more information, see the dirname attribute.
*/
func InputDirnameAttr(value ...any) rend.Node {
	return Attr("dirname", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/disabled

/*
A Boolean attribute which, if present, indicates that the user should not be able to interact with the input. Disabled inputs are typically rendered with a dimmer color or using some other form of indication that the field is not available for use.
    Specifically, disabled inputs do not receive the click event, and disabled inputs are not submitted with the form.

      Note: Although not required by the specification, Firefox will by default persist the dynamic disabled state of an <input> across page loads. Use the autocomplete attribute to control this feature.
*/
func InputDisabledAttr(value ...any) rend.Node {
	return Attr("disabled", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/form

/*
A string specifying the <form> element with which the input is associated (that is, its form owner). This string's value, if present, must match the id of a <form> element in the same document. If this attribute isn't specified, the <input> element is associated with the nearest containing form, if any.
    The form attribute lets you place an input anywhere in the document but have it included with a form elsewhere in the document.

      Note: An input can only be associated with one form.
*/
func InputFormAttr(value ...any) rend.Node {
	return Attr("form", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/formaction

/*
Valid for the image and submit input types only. See the submit input type for more information.
*/
func InputFormactionAttr(value ...any) rend.Node {
	return Attr("formaction", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/formenctype

/*
Valid for the image and submit input types only. See the submit input type for more information.
*/
func InputFormenctypeAttr(value ...any) rend.Node {
	return Attr("formenctype", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/formmethod

/*
Valid for the image and submit input types only. See the submit input type for more information.
*/
func InputFormmethodAttr(value ...any) rend.Node {
	return Attr("formmethod", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/formnovalidate

/*
Valid for the image and submit input types only. See the submit input type for more information.
*/
func InputFormnovalidateAttr(value ...any) rend.Node {
	return Attr("formnovalidate", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/formtarget

/*
Valid for the image and submit input types only. See the submit input type for more information.
*/
func InputFormtargetAttr(value ...any) rend.Node {
	return Attr("formtarget", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/height

/*
Valid for the image input button only, the height is the height of the image file to display to represent the graphical submit button. See the image input type.
*/
func InputHeightAttr(value ...any) rend.Node {
	return Attr("height", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/id

/*
Global attribute valid for all elements, including all the input types, it defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking. The value is used as the value of the <label>'s for attribute to link the label with the form control. See <label>.
*/
func InputIdAttr(value ...any) rend.Node {
	return Attr("id", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/inputmode

/*
Global value valid for all elements, it provides a hint to browsers as to the type of virtual keyboard configuration to use when editing this element or its contents. Values include none, text, tel, url, email, numeric, decimal, and search.
*/
func InputInputmodeAttr(value ...any) rend.Node {
	return Attr("inputmode", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/list

/*
The value given to the list attribute should be the id of a <datalist> element located in the same document. The <datalist> provides a list of predefined values to suggest to the user for this input. Any values in the list that are not compatible with the type are not included in the suggested options. The values provided are suggestions, not requirements: users can select from this predefined list or provide a different value.
    It is valid on text, search, url, tel, email, date, month, week, time, datetime-local, number, range, and color.
    Per the specifications, the list attribute is not supported by the hidden, password, checkbox, radio, file, or any of the button types.
    Depending on the browser, the user may see a custom color palette suggested, tic marks along a range, or even an input that opens like a <select> but allows for non-listed values. Check out the browser compatibility table for the other input types.
    See the <datalist> element.
*/
func InputListAttr(value ...any) rend.Node {
	return Attr("list", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/max

/*
Valid for date, month, week, time, datetime-local, number, and range, it defines the greatest value in the range of permitted values. If the value entered into the element exceeds this, the element fails constraint validation. If the value of the max attribute isn't a number, then the element has no maximum value.
    There is a special case: if the data type is periodic (such as for dates or times), the value of max may be lower than the value of min, which indicates that the range may wrap around; for example, this allows you to specify a time range from 10 PM to 4 AM.
*/
func InputMaxAttr(value ...any) rend.Node {
	return Attr("max", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/maxlength

/*
Valid for text, search, url, tel, email, and password, it defines the maximum string length (measured in UTF-16 code units) that the user can enter into the field. This must be an integer value of 0 or higher. If no maxlength is specified, or an invalid value is specified, the field has no maximum length. This value must also be greater than or equal to the value of minlength.
    The input will fail constraint validation if the length of the text entered into the field is greater than maxlength UTF-16 code units long. By default, browsers prevent users from entering more characters than allowed by the maxlength attribute. See Client-side validation for more information.
*/
func InputMaxlengthAttr(value ...any) rend.Node {
	return Attr("maxlength", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/min

/*
Valid for date, month, week, time, datetime-local, number, and range, it defines the most negative value in the range of permitted values. If the value entered into the element is less than this, the element fails constraint validation. If the value of the min attribute isn't a number, then the element has no minimum value.
    This value must be less than or equal to the value of the max attribute. If the min attribute is present but is not specified or is invalid, no min value is applied. If the min attribute is valid and a non-empty value is less than the minimum allowed by the min attribute, constraint validation will prevent form submission. See Client-side validation for more information.
    There is a special case: if the data type is periodic (such as for dates or times), the value of max may be lower than the value of min, which indicates that the range may wrap around; for example, this allows you to specify a time range from 10 PM to 4 AM.
*/
func InputMinAttr(value ...any) rend.Node {
	return Attr("min", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/minlength

/*
Valid for text, search, url, tel, email, and password, it defines the minimum string length (measured in UTF-16 code units) that the user can enter into the entry field. This must be a non-negative integer value smaller than or equal to the value specified by maxlength. If no minlength is specified, or an invalid value is specified, the input has no minimum length.
    The input will fail constraint validation if the length of the text entered into the field is fewer than minlength UTF-16 code units long, preventing form submission. See Client-side validation for more information.
*/
func InputMinlengthAttr(value ...any) rend.Node {
	return Attr("minlength", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/multiple

/*
The Boolean multiple attribute, if set, means the user can enter comma separated email addresses in the email widget or can choose more than one file with the file input. See the email and file input type.
*/
func InputMultipleAttr(value ...any) rend.Node {
	return Attr("multiple", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/name

/*
A string specifying a name for the input control. This name is submitted along with the control's value when the form data is submitted.
    Consider the name a required attribute (even though it's not). If an input has no name specified, or name is empty, the input's value is not submitted with the form! (Disabled controls, unchecked radio buttons, unchecked checkboxes, and reset buttons are also not sent.)
    There are two special cases:

      _charset_ : If used as the name of an <input> element of type hidden, the input's value is automatically set by the user agent to the character encoding being used to submit the form.
      isindex: For historical reasons, the name isindex is not allowed.

    The name attribute creates a unique behavior for radio buttons.
    Only one radio button in a same-named group of radio buttons can be checked at a time. Selecting any radio button in that group automatically deselects any currently-selected radio button in the same group. The value of that one checked radio button is sent along with the name if the form is submitted,
    When tabbing into a series of same-named group of radio buttons, if one is checked, that one will receive focus. If they aren't grouped together in source order, if one of the group is checked, tabbing into the group starts when the first one in the group is encountered, skipping all those that aren't checked. In other words, if one is checked, tabbing skips the unchecked radio buttons in the group. If none are checked, the radio button group receives focus when the first button in the same name group is reached.
    Once one of the radio buttons in a group has focus, using the arrow keys will navigate through all the radio buttons of the same name, even if the radio buttons are not grouped together in the source order.
    When an input element is given a name, that name becomes a property of the owning form element's HTMLFormElement.elements property. If you have an input whose name is set to guest and another whose name is hat-size, the following code can be used:
    jslet form = document.querySelector("form");

let guestName = form.elements.guest;
let hatSize = form.elements["hat-size"];

    When this code has run, guestName will be the HTMLInputElement for the guest field, and hatSize the object for the hat-size field.

      Warning: Avoid giving form elements a name that corresponds to a built-in property of the form, since you would then override the predefined property or method with this reference to the corresponding input.
*/
func InputNameAttr(value ...any) rend.Node {
	return Attr("name", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/pattern

/*
Valid for text, search, url, tel, email, and password, the pattern attribute defines a regular expression that the input's value must match in order for the value to pass constraint validation. It must be a valid JavaScript regular expression, as used by the RegExp type, and as documented in our guide on regular expressions; the 'u' flag is specified when compiling the regular expression, so that the pattern is treated as a sequence of Unicode code points, instead of as ASCII. No forward slashes should be specified around the pattern text.
    If the pattern attribute is present but is not specified or is invalid, no regular expression is applied and this attribute is ignored completely. If the pattern attribute is valid and a non-empty value does not match the pattern, constraint validation will prevent form submission.

      Note: If using the pattern attribute, inform the user about the expected format by including explanatory text nearby. You can also include a title attribute to explain what the requirements are to match the pattern; most browsers will display this title as a tooltip. The visible explanation is required for accessibility. The tooltip is an enhancement.

    See Client-side validation for more information.
*/
func InputPatternAttr(value ...any) rend.Node {
	return Attr("pattern", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/placeholder

/*
Valid for text, search, url, tel, email, password, and number, the placeholder attribute provides a brief hint to the user as to what kind of information is expected in the field. It should be a word or short phrase that provides a hint as to the expected type of data, rather than an explanation or prompt. The text must not include carriage returns or line feeds. So for example if a field is expected to capture a user's first name, and its label is "First Name", a suitable placeholder might be "e.g. Mustafa".

      Note: The placeholder attribute is not as semantically useful as other ways to explain your form, and can cause unexpected technical issues with your content. See Labels for more information.
*/
func InputPlaceholderAttr(value ...any) rend.Node {
	return Attr("placeholder", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/popovertarget

/*
Turns an <input type="button"> element into a popover control button; takes the ID of the popover element to control as its value. See the Popover API landing page for more details.
*/
func InputPopovertargetAttr(value ...any) rend.Node {
	return Attr("popovertarget", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/popovertargetaction

/*
Specifies the action to be performed on a popover element being controlled by a control <input type="button">. Possible values are:

      "hide"

        The button will hide a shown popover. If you try to hide an already hidden popover, no action will be taken.

      "show"

        The button will show a hidden popover. If you try to show an already showing popover, no action will be taken.

      "toggle"

        The button will toggle a popover between showing and hidden. If the popover is hidden, it will be shown; if the popover is showing, it will be hidden. If popovertargetaction is omitted, "toggle" is the default action that will be performed by the control button.
*/
func InputPopovertargetactionAttr(value ...any) rend.Node {
	return Attr("popovertargetaction", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/hide

/*
The button will hide a shown popover. If you try to hide an already hidden popover, no action will be taken.
*/
func InputHideAttr(value ...any) rend.Node {
	return Attr("hide", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/show

/*
The button will show a hidden popover. If you try to show an already showing popover, no action will be taken.
*/
func InputShowAttr(value ...any) rend.Node {
	return Attr("show", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/toggle

/*
The button will toggle a popover between showing and hidden. If the popover is hidden, it will be shown; if the popover is showing, it will be hidden. If popovertargetaction is omitted, "toggle" is the default action that will be performed by the control button.
*/
func InputToggleAttr(value ...any) rend.Node {
	return Attr("toggle", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/readonly

/*
A Boolean attribute which, if present, indicates that the user should not be able to edit the value of the input. The readonly attribute is supported by the text, search, url, tel, email, date, month, week, time, datetime-local, number, and password input types.
    See the HTML attribute: readonly for more information.
*/
func InputReadonlyAttr(value ...any) rend.Node {
	return Attr("readonly", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/required

/*
required is a Boolean attribute which, if present, indicates that the user must specify a value for the input before the owning form can be submitted. The required attribute is supported by text, search, url, tel, email, date, month, week, time, datetime-local, number, password, checkbox, radio, and file inputs.
    See Client-side validation and the HTML attribute: required for more information.
*/
func InputRequiredAttr(value ...any) rend.Node {
	return Attr("required", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/size

/*
Valid for email, password, tel, url, and text, the size attribute specifies how much of the input is shown. Basically creates same result as setting CSS width property with a few specialities. The actual unit of the value depends on the input type. For password and text, it is a number of characters (or em units) with a default value of 20, and for others, it is pixels (or px units). CSS width takes precedence over the size attribute.
*/
func InputSizeAttr(value ...any) rend.Node {
	return Attr("size", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/src

/*
Valid for the image input button only, the src is string specifying the URL of the image file to display to represent the graphical submit button. See the image input type.
*/
func InputSrcAttr(value ...any) rend.Node {
	return Attr("src", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/step

/*
Valid for date, month, week, time, datetime-local, number, and range, the step attribute is a number that specifies the granularity that the value must adhere to.
    If not explicitly included:

      step defaults to 1 for number and range.
      Each date/time input type has a default step value appropriate for the type; see the individual input pages: date, datetime-local, month, time, and week.

    The value must be a positive number—integer or float—or the special value any, which means no stepping is implied, and any value is allowed (barring other constraints, such as min and max).
    If any is not explicitly set, valid values for the number, date/time input types, and range input types are equal to the basis for stepping — the min value and increments of the step value, up to the max value, if specified.
    For example, if you have <input type="number" min="10" step="2">, then any even integer, 10 or greater, is valid. If omitted, <input type="number">, any integer is valid, but floats (like 4.2) are not valid, because step defaults to 1. For 4.2 to be valid, step would have had to be set to any, 0.1, 0.2, or any the min value would have had to be a number ending in .2, such as <input type="number" min="-5.2">

      Note: When the data entered by the user doesn't adhere to the stepping configuration, the value is considered invalid in constraint validation and will match the :invalid pseudoclass.

    See Client-side validation for more information.
*/
func InputStepAttr(value ...any) rend.Node {
	return Attr("step", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/tabindex

/*
Global attribute valid for all elements, including all the input types, an integer attribute indicating if the element can take input focus (is focusable), if it should participate to sequential keyboard navigation. As all input types except for input of type hidden are focusable, this attribute should not be used on form controls, because doing so would require the management of the focus order for all elements within the document with the risk of harming usability and accessibility if done incorrectly.
*/
func InputTabindexAttr(value ...any) rend.Node {
	return Attr("tabindex", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/title

/*
Global attribute valid for all elements, including all input types, containing a text representing advisory information related to the element it belongs to. Such information can typically, but not necessarily, be presented to the user as a tooltip. The title should NOT be used as the primary explanation of the purpose of the form control. Instead, use the <label> element with a for attribute set to the form control's id attribute. See Labels below.
*/
func InputTitleAttr(value ...any) rend.Node {
	return Attr("title", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/type

/*
A string specifying the type of control to render. For example, to create a checkbox, a value of checkbox is used. If omitted (or an unknown value is specified), the input type text is used, creating a plaintext input field.
    Permitted values are listed in Input types above.
*/
func InputTypeAttr(value ...any) rend.Node {
	return Attr("type", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/value

/*
The input control's value. When specified in the HTML, this is the initial value, and from then on it can be altered or retrieved at any time using JavaScript to access the respective HTMLInputElement object's value property. The value attribute is always optional, though should be considered mandatory for checkbox, radio, and hidden.
*/
func InputValueAttr(value ...any) rend.Node {
	return Attr("value", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/width

/*
Valid for the image input button only, the width is the width of the image file to display to represent the graphical submit button. See the image input type.
*/
func InputWidthAttr(value ...any) rend.Node {
	return Attr("width", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/autocorrect

/*
(Safari only). A string which indicates whether to activate automatic correction while the user is editing this field. Permitted values are:

      on

        Enable automatic correction of typos, as well as processing of text substitutions if any are configured.

      off

        Disable automatic correction and text substitutions.
*/
func InputAutocorrectAttr(value ...any) rend.Node {
	return Attr("autocorrect", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/on

/*
Enable automatic correction of typos, as well as processing of text substitutions if any are configured.
*/
func InputOnAttr(value ...any) rend.Node {
	return Attr("on", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/off

/*
Disable automatic correction and text substitutions.
*/
func InputOffAttr(value ...any) rend.Node {
	return Attr("off", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/incremental

/*
The Boolean attribute incremental is a WebKit and Blink extension (so supported by Safari, Opera, Chrome, etc.) which, if present, tells the user agent to process the input as a live search. As the user edits the value of the field, the user agent sends search events to the HTMLInputElement object representing the search box. This allows your code to update the search results in real time as the user edits the search.
    If incremental is not specified, the search event is only sent when the user explicitly initiates a search (such as by pressing the Enter or Return key while editing the field).
    The search event is rate-limited so that it is not sent more frequently than an implementation-defined interval.
*/
func InputIncrementalAttr(value ...any) rend.Node {
	return Attr("incremental", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/orient

/*
Similar to the -moz-orient non-standard CSS property impacting the <progress> and <meter> elements, the orient attribute defines the orientation of the range slider. Values include horizontal, meaning the range is rendered horizontally, and vertical, where the range is rendered vertically.
*/
func InputOrientAttr(value ...any) rend.Node {
	return Attr("orient", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/results

/*
The results attribute—supported only by Safari—is a numeric value that lets you override the maximum number of entries to be displayed in the <input> element's natively-provided drop-down menu of previous search queries.
    The value must be a non-negative decimal number. If not provided, or an invalid value is given, the browser's default maximum number of entries is used.
*/
func InputResultsAttr(value ...any) rend.Node {
	return Attr("results", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/webkitdirectory

/*
The Boolean webkitdirectory attribute, if present, indicates that only directories should be available to be selected by the user in the file picker interface. See HTMLInputElement.webkitdirectory for additional details and examples.
    Though originally implemented only for WebKit-based browsers, webkitdirectory is also usable in Microsoft Edge as well as Firefox 50 and later. However, even though it has relatively broad support, it is still not standard and should not be used unless you have no alternative.
*/
func InputWebkitdirectoryAttr(value ...any) rend.Node {
	return Attr("webkitdirectory", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkValidity()

/*
Returns true if the element's value passes validity checks; otherwise, returns false and fires an invalid event at the element.
*/
func InputCheckValidityAttr(value ...any) rend.Node {
	return Attr("checkValidity()", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/reportValidity()

/*
Returns true if the element's value passes validity checks; otherwise, returns false, fires an invalid event at the element, and (if the event isn't canceled) reports the problem to the user.
*/
func InputReportValidityAttr(value ...any) rend.Node {
	return Attr("reportValidity()", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/select()

/*
Selects the entire content of the <input> element, if the element's content is selectable. For elements with no selectable text content (such as a visual color picker or calendar date input), this method does nothing.
*/
func InputSelectAttr(value ...any) rend.Node {
	return Attr("select()", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/setCustomValidity()

/*
Sets a custom message to display if the input element's value isn't valid.
*/
func InputSetCustomValidityAttr(value ...any) rend.Node {
	return Attr("setCustomValidity()", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/setRangeText()

/*
Sets the contents of the specified range of characters in the input element to a given string. A selectMode parameter is available to allow controlling how the existing content is affected.
*/
func InputSetRangeTextAttr(value ...any) rend.Node {
	return Attr("setRangeText()", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/setSelectionRange()

/*
Selects the specified range of characters within a textual input element. Does nothing for inputs which aren't presented as text input fields.
*/
func InputSetSelectionRangeAttr(value ...any) rend.Node {
	return Attr("setSelectionRange()", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/showPicker()

/*
Displays the browser picker for the input element that would normally be displayed when the element is selected, but triggered from a button press or other user interaction.
*/
func InputShowPickerAttr(value ...any) rend.Node {
	return Attr("showPicker()", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/stepDown()

/*
Decrements the value of a numeric input by one, by default, or by the specified number of units.
*/
func InputStepDownAttr(value ...any) rend.Node {
	return Attr("stepDown()", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/stepUp()

/*
Increments the value of a numeric input by one or by the specified number of units.
*/
func InputStepUpAttr(value ...any) rend.Node {
	return Attr("stepUp()", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label
/*
Represents a caption for an item in a user interface.
*/
func Label(children ...rend.Node) rend.Node {
	return Element("label", children...)
}

// label attributes



// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label/for

/*
The value of the for attribute must be a single id for a labelable form-related element in the same document as the <label> element. So, any given label element can be associated with only one form control.

      Note: To programmatically set the for attribute, use htmlFor.

    The first element in the document with an id attribute matching the value of the for attribute is the labeled control for this label element — if the element with that id is actually a labelable element. If it is not a labelable element, then the for attribute has no effect. If there are other elements that also match the id value, later in the document, they are not considered.
    Multiple label elements can be given the same value for their for attribute; doing so causes the associated form control (the form control that for value references) to have multiple labels.

      Note: A <label> element can have both a for attribute and a contained control element, as long as the for attribute points to the contained control element.
*/
func LabelForAttr(value ...any) rend.Node {
	return Attr("for", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/legend
/*
Represents a caption for the content of its parent <fieldset>.
*/
func Legend(children ...rend.Node) rend.Node {
	return Element("legend", children...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meter
/*
Represents either a scalar value within a known range or a fractional value.
*/
func Meter(children ...rend.Node) rend.Node {
	return Element("meter", children...)
}

// meter attributes



// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meter/value

/*
The current numeric value. This must be between the minimum and maximum values (min attribute and max attribute) if they are specified. If unspecified or malformed, the value is 0. If specified, but not within the range given by the min attribute and max attribute, the value is equal to the nearest end of the range.

      Note: Unless the value attribute is between 0 and 1 (inclusive), the min and max attributes should define the range so that the value attribute's value is within it.
*/
func MeterValueAttr(value ...any) rend.Node {
	return Attr("value", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meter/min

/*
The lower numeric bound of the measured range. This must be less than the maximum value (max attribute), if specified. If unspecified, the minimum value is 0.
*/
func MeterMinAttr(value ...any) rend.Node {
	return Attr("min", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meter/max

/*
The upper numeric bound of the measured range. This must be greater than the minimum value (min attribute), if specified. If unspecified, the maximum value is 1.
*/
func MeterMaxAttr(value ...any) rend.Node {
	return Attr("max", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meter/low

/*
The upper numeric bound of the low end of the measured range. This must be greater than the minimum value (min attribute), and it also must be less than the high value and maximum value (high attribute and max attribute, respectively), if any are specified. If unspecified, or if less than the minimum value, the low value is equal to the minimum value.
*/
func MeterLowAttr(value ...any) rend.Node {
	return Attr("low", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meter/high

/*
The lower numeric bound of the high end of the measured range. This must be less than the maximum value (max attribute), and it also must be greater than the low value and minimum value (low attribute and min attribute, respectively), if any are specified. If unspecified, or if greater than the maximum value, the high value is equal to the maximum value.
*/
func MeterHighAttr(value ...any) rend.Node {
	return Attr("high", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meter/optimum

/*
This attribute indicates the optimal numeric value. It must be within the range (as defined by the min attribute and max attribute). When used with the low attribute and high attribute, it gives an indication where along the range is considered preferable. For example, if it is between the min attribute and the low attribute, then the lower range is considered preferred. The browser may color the meter's bar differently depending on whether the value is less than or equal to the optimum value.
*/
func MeterOptimumAttr(value ...any) rend.Node {
	return Attr("optimum", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meter/form

/*
This optional attribute is used to explicitly set a <form> owner for the <meter> element. If omitted, the <meter> is associated with its ancestor <form> element or the form association set by the form attribute on another ancestor element, such as on a <fieldset>, if any. If included, the value must be the id of a <form> in the same tree.
*/
func MeterFormAttr(value ...any) rend.Node {
	return Attr("form", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/optgroup
/*
Creates a grouping of options within a <select> element.
*/
func Optgroup(children ...rend.Node) rend.Node {
	return Element("optgroup", children...)
}

// optgroup attributes



// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/optgroup/disabled

/*
If this Boolean attribute is set, none of the items in this option group is selectable. Often browsers grey out such control and it won't receive any browsing events, like mouse clicks or focus-related ones.
*/
func OptgroupDisabledAttr(value ...any) rend.Node {
	return Attr("disabled", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/optgroup/label

/*
The name of the group of options, which the browser can use when labeling the options in the user interface. This attribute is mandatory if this element is used.
*/
func OptgroupLabelAttr(value ...any) rend.Node {
	return Attr("label", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option
/*
Used to define an item contained in a select, an <optgroup>, or a <datalist> element. As such, <option> can represent menu items in popups and other lists of items in an HTML document.
*/
func Option(children ...rend.Node) rend.Node {
	return Element("option", children...)
}

// option attributes



// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option/disabled

/*
If this Boolean attribute is set, this option is not checkable. Often browsers grey out such control and it won't receive any browsing event, like mouse clicks or focus-related ones. If this attribute is not set, the element can still be disabled if one of its ancestors is a disabled <optgroup> element.
*/
func OptionDisabledAttr(value ...any) rend.Node {
	return Attr("disabled", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option/label

/*
This attribute is text for the label indicating the meaning of the option. If the label attribute isn't defined, its value is that of the element text content.
*/
func OptionLabelAttr(value ...any) rend.Node {
	return Attr("label", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option/selected

/*
If present, this Boolean attribute indicates that the option is initially selected. If the <option> element is the descendant of a <select> element whose multiple attribute is not set, only one single <option> of this <select> element may have the selected attribute.
*/
func OptionSelectedAttr(value ...any) rend.Node {
	return Attr("selected", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option/value

/*
The content of this attribute represents the value to be submitted with the form, should this option be selected. If this attribute is omitted, the value is taken from the text content of the option element.
*/
func OptionValueAttr(value ...any) rend.Node {
	return Attr("value", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/output
/*
Container element into which a site or app can inject the results of a calculation or the outcome of a user action.
*/
func Output(children ...rend.Node) rend.Node {
	return Element("output", children...)
}

// output attributes



// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/output/for

/*
A space-separated list of other elements' ids, indicating that those elements contributed input values to (or otherwise affected) the calculation.
*/
func OutputForAttr(value ...any) rend.Node {
	return Attr("for", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/output/form

/*
The <form> element to associate the output with (its form owner). The value of this attribute must be the id of a <form> in the same document. (If this attribute is not set, the <output> is associated with its ancestor <form> element, if any.)
    This attribute lets you associate <output> elements to <form>s anywhere in the document, not just inside a <form>. It can also override an ancestor <form> element.
*/
func OutputFormAttr(value ...any) rend.Node {
	return Attr("form", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/output/name

/*
The element's name. Used in the form.elements API.
*/
func OutputNameAttr(value ...any) rend.Node {
	return Attr("name", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/progress
/*
Displays an indicator showing the completion progress of a task, typically displayed as a progress bar.
*/
func Progress(children ...rend.Node) rend.Node {
	return Element("progress", children...)
}

// progress attributes



// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/progress/max

/*
This attribute describes how much work the task indicated by the progress element requires. The max attribute, if present, must have a value greater than 0 and be a valid floating point number. The default value is 1.
*/
func ProgressMaxAttr(value ...any) rend.Node {
	return Attr("max", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/progress/value

/*
This attribute specifies how much of the task that has been completed. It must be a valid floating point number between 0 and max, or between 0 and 1 if max is omitted. If there is no value attribute, the progress bar is indeterminate; this indicates that an activity is ongoing with no indication of how long it is expected to take.
*/
func ProgressValueAttr(value ...any) rend.Node {
	return Attr("value", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select
/*
Represents a control that provides a menu of options.
*/
func Select(children ...rend.Node) rend.Node {
	return Element("select", children...)
}

// select attributes



// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select/autocomplete

/*
A string providing a hint for a user agent's autocomplete feature. See The HTML autocomplete attribute for a complete list of values and details on how to use autocomplete.
*/
func SelectAutocompleteAttr(value ...any) rend.Node {
	return Attr("autocomplete", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select/autofocus

/*
This Boolean attribute lets you specify that a form control should have input focus when the page loads. Only one form element in a document can have the autofocus attribute.
*/
func SelectAutofocusAttr(value ...any) rend.Node {
	return Attr("autofocus", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select/disabled

/*
This Boolean attribute indicates that the user cannot interact with the control. If this attribute is not specified, the control inherits its setting from the containing element, for example <fieldset>; if there is no containing element with the disabled attribute set, then the control is enabled.
*/
func SelectDisabledAttr(value ...any) rend.Node {
	return Attr("disabled", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select/form

/*
The <form> element to associate the <select> with (its form owner). The value of this attribute must be the id of a <form> in the same document. (If this attribute is not set, the <select> is associated with its ancestor <form> element, if any.)
    This attribute lets you associate <select> elements to <form>s anywhere in the document, not just inside a <form>. It can also override an ancestor <form> element.
*/
func SelectFormAttr(value ...any) rend.Node {
	return Attr("form", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select/multiple

/*
This Boolean attribute indicates that multiple options can be selected in the list. If it is not specified, then only one option can be selected at a time. When multiple is specified, most browsers will show a scrolling list box instead of a single line dropdown.
*/
func SelectMultipleAttr(value ...any) rend.Node {
	return Attr("multiple", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select/name

/*
This attribute is used to specify the name of the control.
*/
func SelectNameAttr(value ...any) rend.Node {
	return Attr("name", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select/required

/*
A Boolean attribute indicating that an option with a non-empty string value must be selected.
*/
func SelectRequiredAttr(value ...any) rend.Node {
	return Attr("required", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select/size

/*
If the control is presented as a scrolling list box (e.g. when multiple is specified), this attribute represents the number of rows in the list that should be visible at one time. Browsers are not required to present a select element as a scrolled list box. The default value is 0.

      Note: According to the HTML specification, the default value for size should be 1; however, in practice, this has been found to break some websites, and no other browser currently does that, so Mozilla has opted to continue to return 0 for the time being with Firefox.
*/
func SelectSizeAttr(value ...any) rend.Node {
	return Attr("size", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea
/*
Represents a multi-line plain-text editing control, useful when you want to allow users to enter a sizeable amount of free-form text, for example, a comment on a review or feedback form.
*/
func Textarea(children ...rend.Node) rend.Node {
	return Element("textarea", children...)
}

// textarea attributes



// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea/autocapitalize

/*
Controls whether inputted text is automatically capitalized and, if so, in what manner. See the autocapitalize global attribute page for more information.
*/
func TextareaAutocapitalizeAttr(value ...any) rend.Node {
	return Attr("autocapitalize", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea/autocomplete

/*
This attribute indicates whether the value of the control can be automatically completed by the browser. Possible values are:

      off: The user must explicitly enter a value into this field for every use, or the document provides its own auto-completion method; the browser does not automatically complete the entry.
      on: The browser can automatically complete the value based on values that the user has entered during previous uses.

    If the autocomplete attribute is not specified on a <textarea> element, then the browser uses the autocomplete attribute value of the <textarea> element's form owner. The form owner is either the <form> element that this <textarea> element is a descendant of or the form element whose id is specified by the form attribute of the input element. For more information, see the autocomplete attribute in <form>.
*/
func TextareaAutocompleteAttr(value ...any) rend.Node {
	return Attr("autocomplete", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea/autocorrect

/*
A string which indicates whether to activate automatic spelling correction and processing of text substitutions (if any are configured) while the user is editing this textarea. Permitted values are:

      on

        Enable automatic spelling correction and text substitutions.

      off

        Disable automatic spelling correction and text substitutions.
*/
func TextareaAutocorrectAttr(value ...any) rend.Node {
	return Attr("autocorrect", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea/on

/*
Enable automatic spelling correction and text substitutions.
*/
func TextareaOnAttr(value ...any) rend.Node {
	return Attr("on", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea/off

/*
Disable automatic spelling correction and text substitutions.
*/
func TextareaOffAttr(value ...any) rend.Node {
	return Attr("off", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea/autofocus

/*
This Boolean attribute lets you specify that a form control should have input focus when the page loads. Only one form-associated element in a document can have this attribute specified.
*/
func TextareaAutofocusAttr(value ...any) rend.Node {
	return Attr("autofocus", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea/cols

/*
The visible width of the text control, in average character widths. If it is specified, it must be a positive integer. If it is not specified, the default value is 20.
*/
func TextareaColsAttr(value ...any) rend.Node {
	return Attr("cols", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea/dirname

/*
This attribute is used to indicate the text directionality of the element contents similar to the dirname attribute of the <input> element.
      For more information, see the dirname attribute.
*/
func TextareaDirnameAttr(value ...any) rend.Node {
	return Attr("dirname", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea/disabled

/*
This Boolean attribute indicates that the user cannot interact with the control. If this attribute is not specified, the control inherits its setting from the containing element, for example <fieldset>; if there is no containing element when the disabled attribute is set, the control is enabled.
*/
func TextareaDisabledAttr(value ...any) rend.Node {
	return Attr("disabled", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea/form

/*
The form element that the <textarea> element is associated with (its "form owner"). The value of the attribute must be the id of a form element in the same document. If this attribute is not specified, the <textarea> element must be a descendant of a form element. This attribute enables you to place <textarea> elements anywhere within a document, not just as descendants of form elements.
*/
func TextareaFormAttr(value ...any) rend.Node {
	return Attr("form", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea/maxlength

/*
The maximum string length (measured in UTF-16 code units) that the user can enter. If this value isn't specified, the user can enter an unlimited number of characters.
*/
func TextareaMaxlengthAttr(value ...any) rend.Node {
	return Attr("maxlength", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea/minlength

/*
The minimum string length (measured in UTF-16 code units) required that the user should enter.
*/
func TextareaMinlengthAttr(value ...any) rend.Node {
	return Attr("minlength", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea/name

/*
The name of the control.
*/
func TextareaNameAttr(value ...any) rend.Node {
	return Attr("name", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea/placeholder

/*
A hint to the user of what can be entered in the control. Carriage returns or line-feeds within the placeholder text must be treated as line breaks when rendering the hint.

      Note: Placeholders should only be used to show an example of the type of data that should be entered into a form; they are not a substitute for a proper <label> element tied to the input. See <input> labels for a full explanation.
*/
func TextareaPlaceholderAttr(value ...any) rend.Node {
	return Attr("placeholder", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea/readonly

/*
This Boolean attribute indicates that the user cannot modify the value of the control. Unlike the disabled attribute, the readonly attribute does not prevent the user from clicking or selecting in the control. The value of a read-only control is still submitted with the form.
*/
func TextareaReadonlyAttr(value ...any) rend.Node {
	return Attr("readonly", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea/required

/*
This attribute specifies that the user must fill in a value before submitting a form.
*/
func TextareaRequiredAttr(value ...any) rend.Node {
	return Attr("required", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea/rows

/*
The number of visible text lines for the control. If it is specified, it must be a positive integer. If it is not specified, the default value is 2.
*/
func TextareaRowsAttr(value ...any) rend.Node {
	return Attr("rows", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea/spellcheck

/*
Specifies whether the <textarea> is subject to spell checking by the underlying browser/OS. The value can be:

      true: Indicates that the element needs to have its spelling and grammar checked.
      default : Indicates that the element is to act according to a default behavior, possibly based on the parent element's own spellcheck value.
      false : Indicates that the element should not be spell checked.
*/
func TextareaSpellcheckAttr(value ...any) rend.Node {
	return Attr("spellcheck", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea/wrap

/*
Indicates how the control should wrap the value for form submission. Possible values are:

      hard: The browser automatically inserts line breaks (CR+LF) so that each line is no longer than the width of the control; the cols attribute must be specified for this to take effect
      soft: The browser ensures that all line breaks in the entered value are a CR+LF pair, but no additional line breaks are added to the value.
      off
    Non-standard
: Like soft but changes appearance to white-space: pre so line segments exceeding cols are not wrapped and the <textarea> becomes horizontally scrollable.

    If this attribute is not specified, soft is its default value.
*/
func TextareaWrapAttr(value ...any) rend.Node {
	return Attr("wrap", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/details
/*
Creates a disclosure widget in which information is visible only when the widget is toggled into an "open" state. A summary or label must be provided using the <summary> element.
*/
func Details(children ...rend.Node) rend.Node {
	return Element("details", children...)
}

// details attributes



// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/details/open

/*
This Boolean attribute indicates whether the details — that is, the contents of the <details> element — are currently visible. The details are shown when this attribute exists, or hidden when this attribute is absent. By default this attribute is absent which means the details are not visible.

      Note: You have to remove this attribute entirely to make the details hidden. open="false" makes the details visible because this attribute is Boolean.
*/
func DetailsOpenAttr(value ...any) rend.Node {
	return Attr("open", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog
/*
Represents a dialog box or other interactive component, such as a dismissible alert, inspector, or subwindow.
*/
func Dialog(children ...rend.Node) rend.Node {
	return Element("dialog", children...)
}

// dialog attributes



// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog/open

/*
Indicates that the dialog box is active and is available for interaction. If the open attribute is not set, the dialog box will not be visible to the user.
      It is recommended to use the .show() or .showModal() method to render dialogs, rather than the open attribute. If a <dialog> is opened using the open attribute, it is non-modal.


      Note: While you can toggle between the open and closed states of non-modal dialog boxes by toggling the presence of the open attribute, this approach is not recommended.
*/
func DialogOpenAttr(value ...any) rend.Node {
	return Attr("open", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog/@starting-style

/*
Provides a set of starting values for properties set on the <dialog> that you want to transition from every time it is opened. This is needed to avoid unexpected behavior. By default, CSS transitions only occur when a property changes from one value to another on a visible element; they are not triggered on elements' first style updates, or when the display type changes from none to another type.
*/
func DialogStartingStyleAttr(value ...any) rend.Node {
	return Attr("@starting-style", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog/display

/*
Add display to the transitions list so that the <dialog> will remain as display: block (or another visible display value set on the dialog's open state) for the duration of the transition, ensuring the other transitions are visible.
*/
func DialogDisplayAttr(value ...any) rend.Node {
	return Attr("display", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog/overlay

/*
Include overlay in the transitions list to ensure the removal of the <dialog> from the top layer is deferred until the transition completes, again ensuring the transition is visible.
*/
func DialogOverlayAttr(value ...any) rend.Node {
	return Attr("overlay", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog/transition-behavior

/*
Set transition-behavior: allow-discrete on the display and overlay transitions (or on the transition shorthand) to enable discrete transitions on these two properties that are not by default animatable.
*/
func DialogTransitionBehaviorAttr(value ...any) rend.Node {
	return Attr("transition-behavior", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/summary
/*
Specifies a summary, caption, or legend for a details element's disclosure box. Clicking the <summary> element toggles the state of the parent <details> element open and closed.
*/
func Summary(children ...rend.Node) rend.Node {
	return Element("summary", children...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/slot
/*
Part of the Web Components technology suite, this element is a placeholder inside a web component that you can fill with your own markup, which lets you create separate DOM trees and present them together.
*/
func Slot(children ...rend.Node) rend.Node {
	return Element("slot", children...)
}

// slot attributes



// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/slot/name

/*
The slot's name.
    A named slot is a <slot> element with a name attribute.
*/
func SlotNameAttr(value ...any) rend.Node {
	return Attr("name", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template
/*
A mechanism for holding HTML that is not to be rendered immediately when a page is loaded but may be instantiated subsequently during runtime using JavaScript.
*/
func Template(children ...rend.Node) rend.Node {
	return Element("template", children...)
}

// template attributes



// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template/shadowrootmode

/*
Creates a shadow root for the parent element. It is a declarative version of the Element.attachShadow() method and accepts the same enumerated values.

      open

        Exposes the internal shadow root DOM for JavaScript (recommended for most use cases).

      closed

        Hides the internal shadow root DOM from JavaScript.



      Note: This is a feature of the HTML parser that cannot be used post-parsing by setting the shadowrootmode attribute through JavaScript. Only allowed values will create the shadow root; any other values, including empty ones, won't trigger this behavior.


      Note: You may find the non-standard shadowroot attribute in older tutorials and examples that used to be supported in Chrome 90-110. This attribute has since been removed and replaced by the standard shadowrootmode attribute.
*/
func TemplateShadowrootmodeAttr(value ...any) rend.Node {
	return Attr("shadowrootmode", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template/open

/*
Exposes the internal shadow root DOM for JavaScript (recommended for most use cases).
*/
func TemplateOpenAttr(value ...any) rend.Node {
	return Attr("open", value...)
}


// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template/closed

/*
Hides the internal shadow root DOM from JavaScript.
*/
func TemplateClosedAttr(value ...any) rend.Node {
	return Attr("closed", value...)
}


// Global Attributes


// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
/*
Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.
*/
func AccesskeyAttr(value ...any) rend.Node {
	return Attr("accesskey", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize
/*
Controls whether inputted text is automatically capitalized and, if so, in what manner.
*/
func AutocapitalizeAttr(value ...any) rend.Node {
	return Attr("autocapitalize", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus
/*
Indicates that an element is to be focused on page load, or as soon as the <dialog> it is part of is displayed. This attribute is a boolean, initially false.
*/
func AutofocusAttr(value ...any) rend.Node {
	return Attr("autofocus", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
/*
A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the class selectors or functions like the method Document.getElementsByClassName().
*/
func ClassAttr(value ...any) rend.Node {
	return Attr("class", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable
/*
An enumerated attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:

      true or the empty string, which indicates that the element must be editable;
      false, which indicates that the element must not be editable.
*/
func ContenteditableAttr(value ...any) rend.Node {
	return Attr("contenteditable", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contextmenu
/*
The id of a <menu> to use as the contextual menu for this element.
*/
func ContextmenuAttr(value ...any) rend.Node {
	return Attr("contextmenu", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
/*
An enumerated attribute indicating the directionality of the element's text. It can have the following values:

      ltr, which means left to right and is to be used for languages that are written from the left to the right (like English);
      rtl, which means right to left and is to be used for languages that are written from the right to the left (like Arabic);
      auto, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.
*/
func DirAttr(value ...any) rend.Node {
	return Attr("dir", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable
/*
An enumerated attribute indicating whether the element can be dragged, using the Drag and Drop API. It can have the following values:

      true, which indicates that the element may be dragged
      false, which indicates that the element may not be dragged.
*/
func DraggableAttr(value ...any) rend.Node {
	return Attr("draggable", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint
/*
Hints what action label (or icon) to present for the enter key on virtual keyboards.
*/
func EnterkeyhintAttr(value ...any) rend.Node {
	return Attr("enterkeyhint", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/exportparts
/*
Used to transitively export shadow parts from a nested shadow tree into a containing light tree.
*/
func ExportpartsAttr(value ...any) rend.Node {
	return Attr("exportparts", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden
/*
An enumerated attribute indicating that the element is not yet, or is no longer, relevant. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.
*/
func HiddenAttr(value ...any) rend.Node {
	return Attr("hidden", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id
/*
Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).
*/
func IdAttr(value ...any) rend.Node {
	return Attr("id", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert
/*
A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.
*/
func InertAttr(value ...any) rend.Node {
	return Attr("inert", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
/*
Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <input> elements, but is usable on any element while in contenteditable mode.
*/
func InputmodeAttr(value ...any) rend.Node {
	return Attr("inputmode", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
/*
Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see Using custom elements for more details).
*/
func IsAttr(value ...any) rend.Node {
	return Attr("is", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
/*
The unique, global identifier of an item.
*/
func ItemidAttr(value ...any) rend.Node {
	return Attr("itemid", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop
/*
Used to add properties to an item. Every HTML element may have an itemprop attribute specified, where an itemprop consists of a name and value pair.
*/
func ItempropAttr(value ...any) rend.Node {
	return Attr("itemprop", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
/*
Properties that are not descendants of an element with the itemscope attribute can be associated with the item using an itemref. It provides a list of element ids (not itemids) with additional properties elsewhere in the document.
*/
func ItemrefAttr(value ...any) rend.Node {
	return Attr("itemref", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
/*
itemscope (usually) works along with itemtype to specify that the HTML contained in a block is about a particular item. itemscope creates the Item and defines the scope of the itemtype associated with it. itemtype is a valid URL of a vocabulary (such as schema.org) that describes the item and its properties context.
*/
func ItemscopeAttr(value ...any) rend.Node {
	return Attr("itemscope", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype
/*
Specifies the URL of the vocabulary that will be used to define itemprops (item properties) in the data structure. itemscope is used to set the scope of where in the data structure the vocabulary set by itemtype will be active.
*/
func ItemtypeAttr(value ...any) rend.Node {
	return Attr("itemtype", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang
/*
Helps define the language of an element: the language that non-editable elements are in, or the language that editable elements should be written in by the user. The attribute contains one "language tag" (made of hyphen-separated "language subtags") in the format defined in RFC 5646: Tags for Identifying Languages (also known as BCP 47). xml:lang has priority over it.
*/
func LangAttr(value ...any) rend.Node {
	return Attr("lang", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
/*
A cryptographic nonce ("number used once") which can be used by Content Security Policy to determine whether or not a given fetch will be allowed to proceed.
*/
func NonceAttr(value ...any) rend.Node {
	return Attr("nonce", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part
/*
A space-separated list of the part names of the element. Part names allows CSS to select and style specific elements in a shadow tree via the ::part pseudo-element.
*/
func PartAttr(value ...any) rend.Node {
	return Attr("part", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/popover
/*
Used to designate an element as a popover element (see Popover API). Popover elements are hidden via display: none until opened via an invoking/control element (i.e. a <button> or <input type="button"> with a popovertarget attribute) or a HTMLElement.showPopover() call.
*/
func PopoverAttr(value ...any) rend.Node {
	return Attr("popover", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/role
/*
Roles define the semantic meaning of content, allowing screen readers and other tools to present and support interaction with an object in a way that is consistent with user expectations of that type of object. roles are added to HTML elements using role="role_type", where role_type is the name of a role in the ARIA specification.
*/
func RoleAttr(value ...any) rend.Node {
	return Attr("role", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot
/*
Assigns a slot in a shadow DOM shadow tree to an element: An element with a slot attribute is assigned to the slot created by the <slot> element whose name attribute's value matches that slot attribute's value.
*/
func SlotAttr(value ...any) rend.Node {
	return Attr("slot", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck
/*
An enumerated attribute defines whether the element may be checked for spelling errors. It may have the following values:

      empty string or true, which indicates that the element should be, if possible, checked for spelling errors;
      false, which indicates that the element should not be checked for spelling errors.
*/
func SpellcheckAttr(value ...any) rend.Node {
	return Attr("spellcheck", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style
/*
Contains CSS styling declarations to be applied to the element. Note that it is recommended for styles to be defined in a separate file or files. This attribute and the <style> element have mainly the purpose of allowing for quick styling, for example for testing purposes.
*/
func StyleAttr(value ...any) rend.Node {
	return Attr("style", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
/*
An integer attribute indicating if the element can take input focus (is focusable), if it should participate to sequential keyboard navigation, and if so, at what position. It can take several values:

      a negative value means that the element should be focusable, but should not be reachable via sequential keyboard navigation;
      0 means that the element should be focusable and reachable via sequential keyboard navigation, but its relative order is defined by the platform convention;
      a positive value means that the element should be focusable and reachable via sequential keyboard navigation; the order in which the elements are focused is the increasing value of the tabindex. If several elements share the same tabindex, their relative order follows their relative positions in the document.
*/
func TabindexAttr(value ...any) rend.Node {
	return Attr("tabindex", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title
/*
Contains a text representing advisory information related to the element it belongs to. Such information can typically, but not necessarily, be presented to the user as a tooltip.
*/
func TitleAttr(value ...any) rend.Node {
	return Attr("title", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate
/*
An enumerated attribute that is used to specify whether an element's attribute values and the values of its Text node children are to be translated when the page is localized, or whether to leave them unchanged. It can have the following values:

      empty string or yes, which indicates that the element will be translated.
      no, which indicates that the element will not be translated.
*/
func TranslateAttr(value ...any) rend.Node {
	return Attr("translate", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/virtualkeyboardpolicy
/*
An enumerated attribute used to control the on-screen virtual keyboard behavior on devices such as tablets, mobile phones, or other devices where a hardware keyboard may not be available for elements that its content is editable (for example, it is an <input> or <textarea> element, or an element with the contenteditable attribute set).

      auto or an empty string, which automatically shows the virtual keyboard when the element is focused or tapped.
      manual, which decouples focus and tap on the element from the virtual keyboard's state.
*/
func VirtualkeyboardpolicyAttr(value ...any) rend.Node {
	return Attr("virtualkeyboardpolicy", value...)
}


// Aria Attributes


// https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-autocomplete
func AriaAutocompleteAttr(value ...any) rend.Node {
	return Attr("aria-autocomplete", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-checked
func AriaCheckedAttr(value ...any) rend.Node {
	return Attr("aria-checked", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-disabled
func AriaDisabledAttr(value ...any) rend.Node {
	return Attr("aria-disabled", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-errormessage
func AriaErrormessageAttr(value ...any) rend.Node {
	return Attr("aria-errormessage", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-expanded
func AriaExpandedAttr(value ...any) rend.Node {
	return Attr("aria-expanded", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-haspopup
func AriaHaspopupAttr(value ...any) rend.Node {
	return Attr("aria-haspopup", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-hidden
func AriaHiddenAttr(value ...any) rend.Node {
	return Attr("aria-hidden", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-invalid
func AriaInvalidAttr(value ...any) rend.Node {
	return Attr("aria-invalid", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-label
func AriaLabelAttr(value ...any) rend.Node {
	return Attr("aria-label", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-level
func AriaLevelAttr(value ...any) rend.Node {
	return Attr("aria-level", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-modal
func AriaModalAttr(value ...any) rend.Node {
	return Attr("aria-modal", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-multiline
func AriaMultilineAttr(value ...any) rend.Node {
	return Attr("aria-multiline", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-multiselectable
func AriaMultiselectableAttr(value ...any) rend.Node {
	return Attr("aria-multiselectable", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-orientation
func AriaOrientationAttr(value ...any) rend.Node {
	return Attr("aria-orientation", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-placeholder
func AriaPlaceholderAttr(value ...any) rend.Node {
	return Attr("aria-placeholder", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-pressed
func AriaPressedAttr(value ...any) rend.Node {
	return Attr("aria-pressed", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-readonly
func AriaReadonlyAttr(value ...any) rend.Node {
	return Attr("aria-readonly", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-required
func AriaRequiredAttr(value ...any) rend.Node {
	return Attr("aria-required", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-selected
func AriaSelectedAttr(value ...any) rend.Node {
	return Attr("aria-selected", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-sort
func AriaSortAttr(value ...any) rend.Node {
	return Attr("aria-sort", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-valuemax
func AriaValuemaxAttr(value ...any) rend.Node {
	return Attr("aria-valuemax", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-valuemin
func AriaValueminAttr(value ...any) rend.Node {
	return Attr("aria-valuemin", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-valuenow
func AriaValuenowAttr(value ...any) rend.Node {
	return Attr("aria-valuenow", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-valuetext
func AriaValuetextAttr(value ...any) rend.Node {
	return Attr("aria-valuetext", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-busy
func AriaBusyAttr(value ...any) rend.Node {
	return Attr("aria-busy", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-live
func AriaLiveAttr(value ...any) rend.Node {
	return Attr("aria-live", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-relevant
func AriaRelevantAttr(value ...any) rend.Node {
	return Attr("aria-relevant", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-atomic
func AriaAtomicAttr(value ...any) rend.Node {
	return Attr("aria-atomic", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-dropeffect
func AriaDropeffectAttr(value ...any) rend.Node {
	return Attr("aria-dropeffect", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-grabbed
func AriaGrabbedAttr(value ...any) rend.Node {
	return Attr("aria-grabbed", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-activedescendant
func AriaActivedescendantAttr(value ...any) rend.Node {
	return Attr("aria-activedescendant", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-colcount
func AriaColcountAttr(value ...any) rend.Node {
	return Attr("aria-colcount", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-colindex
func AriaColindexAttr(value ...any) rend.Node {
	return Attr("aria-colindex", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-colspan
func AriaColspanAttr(value ...any) rend.Node {
	return Attr("aria-colspan", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-controls
func AriaControlsAttr(value ...any) rend.Node {
	return Attr("aria-controls", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-describedby
func AriaDescribedbyAttr(value ...any) rend.Node {
	return Attr("aria-describedby", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-description
func AriaDescriptionAttr(value ...any) rend.Node {
	return Attr("aria-description", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-details
func AriaDetailsAttr(value ...any) rend.Node {
	return Attr("aria-details", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-flowto
func AriaFlowtoAttr(value ...any) rend.Node {
	return Attr("aria-flowto", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-labelledby
func AriaLabelledbyAttr(value ...any) rend.Node {
	return Attr("aria-labelledby", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-owns
func AriaOwnsAttr(value ...any) rend.Node {
	return Attr("aria-owns", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-posinset
func AriaPosinsetAttr(value ...any) rend.Node {
	return Attr("aria-posinset", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-rowcount
func AriaRowcountAttr(value ...any) rend.Node {
	return Attr("aria-rowcount", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-rowindex
func AriaRowindexAttr(value ...any) rend.Node {
	return Attr("aria-rowindex", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-rowspan
func AriaRowspanAttr(value ...any) rend.Node {
	return Attr("aria-rowspan", value...)
}

// https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-setsize
func AriaSetsizeAttr(value ...any) rend.Node {
	return Attr("aria-setsize", value...)
}


// Overrides

func DataAttr(tagName string, value ...any) rend.Node {
	return tag(fmt.Sprintf("data-%s", tagName), value...)
}
